\textrm{（1）}
<iso646.h>
#define and &&
#define and_eq &=
#define bitand &
#define bitor |
#define compl ~
#define not !
#define not_eq !=
#define or ||
#define or_eq |=
#define xor ^
#define xor_eq ^=

\textrm{（2）}
<sys/cdfes.h>
#define __weak_reference(sym,alias) __asm__ ( ".weak " _C2SC_STRINGIFY ( alias ) ) ; __asm__ ( ".equ " _C2SC_STRINGIFY ( alias ) ", " _C2SC_STRINGIFY ( sym ) )
#define __warn_references(sym,msg) __asm__ ( ".section .gnu.warning." _C2SC_STRINGIFY ( sym ) ) ; __asm__ ( ".asciz \"" msg "\"" ) ; __asm__ ( ".previous" )
#define __IDSTRING(name,string) __asm__ ( ".ident\t\"" string "\"" )
#define __FBSDID(s) __asm__ ( ".ident\t\"" s "\"" )
#define __RCSID(s) __asm__ ( ".ident\t\"" s "\"" )
#define __RCSID_SOURCE(s) __asm__ ( ".ident\t\"" s "\"" )
#define __SCCSID(s) __asm__ ( ".ident\t\"" s "\"" )
#define __COPYRIGHT(s) __asm__ ( ".ident\t\"" s "\"" )

\textrm{（3）}
<netinet/in.h>
#define CTL_IPPROTO_NAMES { { "ip", CTLTYPE_NODE }, { "icmp", CTLTYPE_NODE }, { "igmp", CTLTYPE_NODE }, { "ggp", CTLTYPE_NODE }, { 0, 0 }, { 0, 0 }, { "tcp", CTLTYPE_NODE }, { 0, 0 }, { "egp", CTLTYPE_NODE }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { "pup", CTLTYPE_NODE }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { "udp", CTLTYPE_NODE }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { "idp", CTLTYPE_NODE }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { "ipsec", CTLTYPE_NODE }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { 0, 0 }, { "pim", CTLTYPE_NODE }, }
#define IPCTL_NAMES { { 0, 0 }, { "forwarding", CTLTYPE_INT }, { "redirect", CTLTYPE_INT }, { "ttl", CTLTYPE_INT }, { "mtu", CTLTYPE_INT }, { "rtexpire", CTLTYPE_INT }, { "rtminexpire", CTLTYPE_INT }, { "rtmaxcache", CTLTYPE_INT }, { "sourceroute", CTLTYPE_INT }, { "directed-broadcast", CTLTYPE_INT }, { "intr-queue-maxlen", CTLTYPE_INT }, { "intr-queue-drops", CTLTYPE_INT }, { "stats", CTLTYPE_STRUCT }, { "accept_sourceroute", CTLTYPE_INT }, { "fastforwarding", CTLTYPE_INT }, }

<netinet6/in6.h>
#define IN6ADDR_ANY_INIT {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }}}
#define IN6ADDR_LOOPBACK_INIT {{{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}
#define IN6ADDR_NODELOCAL_ALLNODES_INIT {{{ 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}
#define IN6ADDR_INTFACELOCAL_ALLNODES_INIT {{{ 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}
#define IN6ADDR_LINKLOCAL_ALLNODES_INIT {{{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 }}}
#define IN6ADDR_LINKLOCAL_ALLROUTERS_INIT {{{ 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02 }}}

<pthread.h>
#define PTHREAD_ONCE_INIT { 0 , ((void *)0) }

<socket.h>
#define CTL_NET_NAMES { { 0, 0 }, { "unix", CTLTYPE_NODE }, { "inet", CTLTYPE_NODE }, { "implink", CTLTYPE_NODE }, { "pup", CTLTYPE_NODE }, { "chaos", CTLTYPE_NODE }, { "xerox_ns", CTLTYPE_NODE }, { "iso", CTLTYPE_NODE }, { "emca", CTLTYPE_NODE }, { "datakit", CTLTYPE_NODE }, { "ccitt", CTLTYPE_NODE }, { "ibm_sna", CTLTYPE_NODE }, { "decnet", CTLTYPE_NODE }, { "dec_dli", CTLTYPE_NODE }, { "lat", CTLTYPE_NODE }, { "hylink", CTLTYPE_NODE }, { "appletalk", CTLTYPE_NODE }, { "route", CTLTYPE_NODE }, { "link_layer", CTLTYPE_NODE }, { "xtp", CTLTYPE_NODE }, { "coip", CTLTYPE_NODE }, { "cnt", CTLTYPE_NODE }, { "rtip", CTLTYPE_NODE }, { "ipx", CTLTYPE_NODE }, { "sip", CTLTYPE_NODE }, { "pip", CTLTYPE_NODE }, { "isdn", CTLTYPE_NODE }, { "key", CTLTYPE_NODE }, { "inet6", CTLTYPE_NODE }, { "natm", CTLTYPE_NODE }, { "atm", CTLTYPE_NODE }, { "hdrcomplete", CTLTYPE_NODE }, { "netgraph", CTLTYPE_NODE }, { "snp", CTLTYPE_NODE }, { "scp", CTLTYPE_NODE }, }
#define CTL_NET_RT_NAMES { { 0, 0 }, { "dump", CTLTYPE_STRUCT }, { "flags", CTLTYPE_STRUCT }, { "iflist", CTLTYPE_STRUCT }, { "ifmalist", CTLTYPE_STRUCT }, }

\textrm{（4）}
#define timercmp(tvp,uvp,cmp) ( ( ( tvp ) -> tv_sec == ( uvp ) -> tv_sec ) ? ( ( tvp ) -> tv_usec cmp ( uvp ) -> tv_usec ) : ( ( tvp ) -> tv_sec cmp ( uvp ) -> tv_sec ) )





----------------------------------------------------------------------

#define __strong_reference(sym,aliassym) extern __typeof ( sym ) aliassym ;
==> <gave up...>

#define _assert(e) ( ( e ) ? ( void ) 0 : __assert ( __func__ , , - 1234567890 , "e" ) )
==> <gave up...>
#define assert(e) ( ( e ) ? ( void ) 0 : __assert ( __func__ , , - 1234567890 , _C2SC_STRINGIFY ( e ) ) )
==> <gave up...>

#define _cOMPLEX_i 1.0fi
==> <gave up...>
#define I 1.0fi
==> <gave up...>

#define __fldcw(__cw) __asm volatile ( "fldcw %0" : : "m" ( __cw ) )
==> <gave up...>
#define __fldenv(__env) __asm volatile ( "fldenv %0" : : "m" ( __env ) )
==> <gave up...>
#define __fnclex() __asm volatile ( "fnclex" )
==> <gave up...>

#define __fwait() __asm volatile ( "fwait" )
==> <gave up...>

#define bool _Bool
==> <gave up...>

#define fropen(cookie,nil) funopen ( cookie , , 0 , 0 , 0 )
==> <gave up...>
#define fwopen(cookie,nil) funopen ( cookie , 0 , , 0 , 0 )
==> <gave up...>

#define __tg_integer(e1,e2,e3) ( ( ( __typeof__ ( e1 ) ) 1.5 == 1 ) || ( ( __typeof__ ( e2 ) ) 1.5 == 1 ) || ( ( __typeof__ ( e3 ) ) 1.5 == 1 ) )
==> <gave up...>
#define __tg_impl_simple(x,y,z,nil,fnf,fnl,va_arg) __builtin_choose_expr ( ( ( __builtin_types_compatible_p ( __typeof__ ( x ) , long double ) || __builtin_types_compatible_p ( __typeof__ ( y ) , long double ) || __builtin_types_compatible_p ( __typeof__ ( z ) , long double ) ) || ( __builtin_types_compatible_p ( __typeof__ ( x ) , long double ) || __builtin_types_compatible_p ( __typeof__ ( y ) , long double ) || __builtin_types_compatible_p ( __typeof__ ( z ) , long double ) ) ) , fnl ( va_arg ) , __builtin_choose_expr ( ( ( __builtin_types_compatible_p ( __typeof__ ( x ) , double ) || __builtin_types_compatible_p ( __typeof__ ( y ) , double ) || __builtin_types_compatible_p ( __typeof__ ( z ) , double ) ) || ( __builtin_types_compatible_p ( __typeof__ ( x ) , double ) || __builtin_types_compatible_p ( __typeof__ ( y ) , double ) || __builtin_types_compatible_p ( __typeof__ ( z ) , double ) ) ) || ( ( ( __typeof__ ( x ) ) 1.5 == 1 ) || ( ( __typeof__ ( y ) ) 1.5 == 1 ) || ( ( __typeof__ ( z ) ) 1.5 == 1 ) ) , ( va_arg ) , fnf ( va_arg ) ) )
==> <gave up...>

