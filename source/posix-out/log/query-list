<sys/cdefs.h>
#define __offsetof(type,field) ( ( size_t ) ( & ( ( type * ) 0 ) -> field ) )
 1:(csym::size_t (ptr (fref (mref (cast (ptr csym::type) 0)) csym::field)))
[not typename --- size_t]
 2:(cast csym::size_t (ptr (fref (mref (cast (ptr csym::type) 0)) csym::field)))
[typename --- size_t]
Select number? 2
#define __rangeof(type,start,end) ( ( ( size_t ) ( & ( ( type * ) 0 ) -> end ) ) - ( ( size_t ) ( & ( ( type * ) 0 ) -> start ) ) )
 1:(- (csym::size_t (ptr (fref (mref (cast (ptr csym::type) 0)) csym::end)))
 (csym::size_t (ptr (fref (mref (cast (ptr csym::type) 0)) csym::start))))
[not typename --- size_t]
 2:(- (cast csym::size_t (ptr (fref (mref (cast (ptr csym::type) 0)) csym::end)))
 (cast csym::size_t (ptr (fref (mref (cast (ptr csym::type) 0)) csym::start))))
[typename --- size_t]
Select number? 2

<sys/_sigset.h>
#define _SIG_IDX(sig) ( ( sig ) - 1 )
 1:(- csym::sig 1)
[not typename --- sig]
 2:(cast csym::sig (- 1))
[typename --- sig]
Select number? 1
#define _SIG_WORD(sig) ( ( ( sig ) - 1 ) >> 5 )
 1:(>> (- csym::sig 1) 5)
[not typename --- sig]
 2:(>> (cast csym::sig (- 1)) 5)
[typename --- sig]
Select number? 1
#define _SIG_BIT(sig) ( 1 << ( ( ( sig ) - 1 ) & 31 ) )
 1:(<< 1 (bit-and (- csym::sig 1) 31))
[not typename --- sig]
 2:(<< 1 (bit-and (cast csym::sig (- 1)) 31))
[typename --- sig]
Select number? 1

<sys/select.h>
#define _howmany(x,y) ( ( ( x ) + ( ( y ) - 1 ) ) / ( y ) )
 1:(/ (+ csym::x (- csym::y 1)) csym::y)
[not typename --- x]
 2:(/ (cast csym::x (+ (- csym::y 1))) csym::y)
[typename --- x]
Select number? 1
#define FD_ZERO(p) do { fd_set * _p ; __size_t _n ; _p = ( p ) ; _n = ( ( ( 1024U ) + ( ( ( sizeof ( __fd_mask ) * 8 ) ) - 1 ) ) / ( ( sizeof ( __fd_mask ) * 8 ) ) ) ; while ( _n > 0 ) _p -> __fds_bits [ -- _n ] = 0 ; } while ( 0 )
 1:((do-while 0 (* csym::fd_set csym::_p) (decl csym::_n csym::__size_t)
  (= csym::_p csym::p)
  (= csym::_n
   (/ (+ (cast unsigned-int 1024) (- (* (sizeof csym::__fd_mask) 8) 1))
    (* (sizeof csym::__fd_mask) 8)))
  (while (> csym::_n 0)
   (= (aref (fref (mref csym::_p) csym::__fds_bits) (-- csym::_n)) 0))))
[not typename --- fd_set, _p]
 2:((do-while 0 (* csym::fd_set csym::_p) (decl csym::_n csym::__size_t)
  (def c2sc::$abstract csym::_p csym::p)
  (= csym::_n
   (/ (+ (cast unsigned-int 1024) (- (* (sizeof csym::__fd_mask) 8) 1))
    (* (sizeof csym::__fd_mask) 8)))
  (while (> csym::_n 0)
   (= (aref (fref (mref csym::_p) csym::__fds_bits) (-- csym::_n)) 0))))
[typename --- _p]
[not typename --- fd_set]
 3:((do-while 0 (decl csym::_p (ptr csym::fd_set)) (decl csym::_n csym::__size_t)
  (= csym::_p csym::p)
  (= csym::_n
   (/ (+ (cast unsigned-int 1024) (- (* (sizeof csym::__fd_mask) 8) 1))
    (* (sizeof csym::__fd_mask) 8)))
  (while (> csym::_n 0)
   (= (aref (fref (mref csym::_p) csym::__fds_bits) (-- csym::_n)) 0))))
[typename --- fd_set]
Select number? 3

<sys/types.h>
#define major(x) ( ( int ) ( ( ( u_int ) ( x ) >> 8 ) & 0xff ) )
 1:(cast int (bit-and (>> (csym::u_int csym::x) 8) 255))
[not typename --- u_int]
 2:(cast int (bit-and (>> (cast csym::u_int csym::x) 8) 255))
[typename --- u_int]
[not typename --- x]
Select number? 2
#define minor(x) ( ( int ) ( ( x ) & 0xffff00ff ) )
 1:(cast int (bit-and csym::x 4294902015))
[not typename --- x]
 2:(cast int (cast csym::x (ptr 4294902015)))
[typename --- x]
Select number? 1
#define makedev(x,y) ( ( dev_t ) ( ( ( x ) << 8 ) | ( y ) ) )
 1:(csym::dev_t (bit-or (<< csym::x 8) csym::y))
[not typename --- dev_t]
 2:(cast csym::dev_t (bit-or (<< csym::x 8) csym::y))
[typename --- dev_t]
Select number? 2

<sys/singal.h>
#define sigmask(m) ( 1 << ( ( m ) - 1 ) )
 1:(<< 1 (- csym::m 1))
[not typename --- m]
 2:(<< 1 (cast csym::m (- 1)))
[typename --- m]
Select number? 1

<ctype.h>
#define isascii(c) ( ( ( c ) & ~ 0x7F ) == 0 )
 1:(== (bit-and csym::c (bit-not 127)) 0)
[not typename --- c]
 2:(== (cast csym::c (ptr (bit-not 127))) 0)
[typename --- c]
Select number? 1
#define toascii(c) ( ( c ) & 0x7F )
 1:(bit-and csym::c 127)
[not typename --- c]
 2:(cast csym::c (ptr 127))
[typename --- c]
Select number? 1

<sys/dirent.h>
#define IFTODT(mode) ( ( ( mode ) & 0170000 ) >> 12 )
 1:(>> (bit-and csym::mode 61440) 12)
[not typename --- mode]
 2:(>> (cast csym::mode (ptr 61440)) 12)
[typename --- mode]
Select number? 1

<sys/stat.h>
#define S_ISDIR(m) ( ( ( m ) & 0170000 ) == 0040000 )
 1:(== (bit-and csym::m 61440) 16384)
[not typename --- m]
 2:(== (cast csym::m (ptr 61440)) 16384)
[typename --- m]
Select number? 1
#define S_ISCHR(m) ( ( ( m ) & 0170000 ) == 0020000 )
 1:(== (bit-and csym::m 61440) 8192)
[not typename --- m]
 2:(== (cast csym::m (ptr 61440)) 8192)
[typename --- m]
Select number? 1
#define S_ISBLK(m) ( ( ( m ) & 0170000 ) == 0060000 )
 1:(== (bit-and csym::m 61440) 24576)
[not typename --- m]
 2:(== (cast csym::m (ptr 61440)) 24576)
[typename --- m]
Select number? 1
#define S_ISREG(m) ( ( ( m ) & 0170000 ) == 0100000 )
 1:(== (bit-and csym::m 61440) 32768)
[not typename --- m]
 2:(== (cast csym::m (ptr 61440)) 32768)
[typename --- m]
Select number? 1
#define S_ISFIFO(m) ( ( ( m ) & 0170000 ) == 0010000 )
 1:(== (bit-and csym::m 61440) 4096)
[not typename --- m]
 2:(== (cast csym::m (ptr 61440)) 4096)
[typename --- m]
Select number? 1
#define S_ISLNK(m) ( ( ( m ) & 0170000 ) == 0120000 )
 1:(== (bit-and csym::m 61440) 40960)
[not typename --- m]
 2:(== (cast csym::m (ptr 61440)) 40960)
[typename --- m]
Select number? 1
#define S_ISSOCK(m) ( ( ( m ) & 0170000 ) == 0140000 )
 1:(== (bit-and csym::m 61440) 49152)
[not typename --- m]
 2:(== (cast csym::m (ptr 61440)) 49152)
[typename --- m]
Select number? 1
#define S_ISWHT(m) ( ( ( m ) & 0170000 ) == 0160000 )
 1:(== (bit-and csym::m 61440) 57344)
[not typename --- m]
 2:(== (cast csym::m (ptr 61440)) 57344)
[typename --- m]
Select number? 1

<net/if.h>
#define IF_Kbps(x) ( ( x ) * 1000 )
 1:(* csym::x 1000)
[not typename --- x]
 2:(cast csym::x (mref 1000))
[typename --- x]
Select number? 1
#define IF_Mbps(x) ( ( ( ( x ) * 1000 ) * 1000 ) )
 1:(* (* csym::x 1000) 1000)
[not typename --- x]
 2:(* (cast csym::x (mref 1000)) 1000)
[typename --- x]
Select number? 1
#define IF_Gbps(x) ( ( ( ( ( ( x ) * 1000 ) * 1000 ) * 1000 ) ) )
 1:(* (* (* csym::x 1000) 1000) 1000)
[not typename --- x]
 2:(* (* (cast csym::x (mref 1000)) 1000) 1000)
[typename --- x]
Select number? 1

<netinet/in.h>
#define IN_CLASSA(i) ( ( ( u_int32_t ) ( i ) & 0x80000000 ) == 0 )
 1:(== (bit-and (csym::u_int32_t csym::i) 2147483648) 0)
[not typename --- u_int32_t]
 2:(== (bit-and (cast csym::u_int32_t csym::i) 2147483648) 0)
[typename --- u_int32_t]
[not typename --- i]
 3:(== (cast csym::u_int32_t (cast csym::i (ptr 2147483648))) 0)
[typename --- u_int32_t, i]
Select number? 2

#define IN_CLASSB(i) ( ( ( u_int32_t ) ( i ) & 0xc0000000 ) == 0x80000000 )
 1:(== (bit-and (csym::u_int32_t csym::i) 3221225472) 2147483648)
[not typename --- u_int32_t]
 2:(== (bit-and (cast csym::u_int32_t csym::i) 3221225472) 2147483648)
[typename --- u_int32_t]
[not typename --- i]
 3:(== (cast csym::u_int32_t (cast csym::i (ptr 3221225472))) 2147483648)
[typename --- u_int32_t, i]
Select number? 2

#define IN_CLASSC(i) ( ( ( u_int32_t ) ( i ) & 0xe0000000 ) == 0xc0000000 )
 1:(== (bit-and (csym::u_int32_t csym::i) 3758096384) 3221225472)
[not typename --- u_int32_t]
 2:(== (bit-and (cast csym::u_int32_t csym::i) 3758096384) 3221225472)
[typename --- u_int32_t]
[not typename --- i]
 3:(== (cast csym::u_int32_t (cast csym::i (ptr 3758096384))) 3221225472)
[typename --- u_int32_t, i]
Select number? 2

#define IN_CLASSD(i) ( ( ( u_int32_t ) ( i ) & 0xf0000000 ) == 0xe0000000 )
 1:(== (bit-and (csym::u_int32_t csym::i) 4026531840) 3758096384)
[not typename --- u_int32_t]
 2:(== (bit-and (cast csym::u_int32_t csym::i) 4026531840) 3758096384)
[typename --- u_int32_t]
[not typename --- i]
 3:(== (cast csym::u_int32_t (cast csym::i (ptr 4026531840))) 3758096384)
[typename --- u_int32_t, i]
Select number? 2

#define IN_MULTICAST(i) ( ( ( u_int32_t ) ( i ) & 0xf0000000 ) == 0xe0000000 )
 1:(== (bit-and (csym::u_int32_t csym::i) 4026531840) 3758096384)
[not typename --- u_int32_t]
 2:(== (bit-and (cast csym::u_int32_t csym::i) 4026531840) 3758096384)
[typename --- u_int32_t]
[not typename --- i]
 3:(== (cast csym::u_int32_t (cast csym::i (ptr 4026531840))) 3758096384)
[typename --- u_int32_t, i]
Select number? 2

#define IN_EXPERIMENTAL(i) ( ( ( u_int32_t ) ( i ) & 0xf0000000 ) == 0xf0000000 )
 1:(== (bit-and (csym::u_int32_t csym::i) 4026531840) 4026531840)
[not typename --- u_int32_t]
 2:(== (bit-and (cast csym::u_int32_t csym::i) 4026531840) 4026531840)
[typename --- u_int32_t]
[not typename --- i]
 3:(== (cast csym::u_int32_t (cast csym::i (ptr 4026531840))) 4026531840)
[typename --- u_int32_t, i]
Select number? 2
#define IN_BADCLASS(i) ( ( ( u_int32_t ) ( i ) & 0xf0000000 ) == 0xf0000000 )
 1:(== (bit-and (csym::u_int32_t csym::i) 4026531840) 4026531840)
[not typename --- u_int32_t]
 2:(== (bit-and (cast csym::u_int32_t csym::i) 4026531840) 4026531840)
[typename --- u_int32_t]
[not typename --- i]
 3:(== (cast csym::u_int32_t (cast csym::i (ptr 4026531840))) 4026531840)
[typename --- u_int32_t, i]
Select number? 2

<pwd.h>
#define _PW_VERSIONED(x,v) ( ( unsigned char ) ( ( ( x ) & 0xCF ) | ( ( v ) << 4 ) ) )
 1:(cast unsigned-char (bit-or (bit-and csym::x 207) (<< csym::v 4)))
[not typename --- x]
 2:(cast unsigned-char (bit-or (cast csym::x (ptr 207)) (<< csym::v 4)))
[typename --- x]
Select number? 1

<sys/resource.h>
#define RLIM_INFINITY ((rlim_t)(((u_quad_t)1 << 63) - 1))
 1:(csym::rlim_t (- (<< (cast csym::u_quad_t 1) 63) 1))
[not typename --- rlim_t]
 2:(cast csym::rlim_t (- (<< (cast csym::u_quad_t 1) 63) 1))
[typename --- rlim_t]
Select number? 2

<machine/param.h>
#define _ALIGN(p) ( ( ( unsigned ) ( p ) + ( sizeof ( int ) - 1 ) ) & ~ ( sizeof ( int ) - 1 ) )
 1:(bit-and (+ (cast unsigned-int csym::p) (- (sizeof int) 1))
 (bit-not (- (sizeof int) 1)))
[not typename --- p]
 2:(bit-and (cast unsigned-int (cast csym::p (+ (- (sizeof int) 1))))
 (bit-not (- (sizeof int) 1)))
[typename --- p]
Select number? 1

<sys/socket.h>
#define CMSG_DATA(cmsg) ( ( unsigned char * ) ( cmsg ) + ( ( ( unsigned ) ( sizeof ( struct cmsghdr ) ) + ( sizeof ( int ) - 1 ) ) & ~ ( sizeof ( int ) - 1 ) ) )
 1:(+ (cast (ptr unsigned-char) csym::cmsg)
 (bit-and
  (+ (cast unsigned-int (sizeof (struct csym::cmsghdr))) (- (sizeof int) 1))
  (bit-not (- (sizeof int) 1))))
[not typename --- cmsg]
 2:(cast (ptr unsigned-char)
 (cast csym::cmsg
  (+
   (bit-and
    (+ (cast unsigned-int (sizeof (struct csym::cmsghdr))) (- (sizeof int) 1))
    (bit-not (- (sizeof int) 1))))))
[typename --- cmsg]
Select number? 1

#define CMSG_SPACE(l) ( ( ( ( unsigned ) ( sizeof ( struct cmsghdr ) ) + ( sizeof ( int ) - 1 ) ) & ~ ( sizeof ( int ) - 1 ) ) + ( ( ( unsigned ) ( l ) + ( sizeof ( int ) - 1 ) ) & ~ ( sizeof ( int ) - 1 ) ) )
 1:(+
 (bit-and
  (+ (cast unsigned-int (sizeof (struct csym::cmsghdr))) (- (sizeof int) 1))
  (bit-not (- (sizeof int) 1)))
 (bit-and (+ (cast unsigned-int csym::l) (- (sizeof int) 1))
  (bit-not (- (sizeof int) 1))))
[not typename --- l]
 2:(+
 (bit-and
  (+ (cast unsigned-int (sizeof (struct csym::cmsghdr))) (- (sizeof int) 1))
  (bit-not (- (sizeof int) 1)))
 (bit-and (cast unsigned-int (cast csym::l (+ (- (sizeof int) 1))))
  (bit-not (- (sizeof int) 1))))
[typename --- l]
Select number? 1

<stddef.h>
#define offsetof(type,member) ( ( size_t ) ( & ( ( type * ) 0 ) -> member ) )
 1:(csym::size_t (ptr (fref (mref (cast (ptr csym::type) 0)) csym::member)))
[not typename --- size_t]
 2:(cast csym::size_t (ptr (fref (mref (cast (ptr csym::type) 0)) csym::member)))
[typename --- size_t]
Select number? 2

<stdio.h>
#define feof(p) ( ! __isthreaded ? ( ( ( p ) -> _flags & 0x0020 ) != 0 ) : ( feof ) ( p ) )
 1:(if-exp (not csym::__isthreaded)
 (!= (bit-and (fref (mref csym::p) csym::_flags) 32) 0) (csym::feof csym::p))
[not typename --- feof]
 2:(if-exp (not csym::__isthreaded)
 (!= (bit-and (fref (mref csym::p) csym::_flags) 32) 0)
 (cast csym::feof csym::p))
[typename --- feof]
Select number? 1
#define ferror(p) ( ! __isthreaded ? ( ( ( p ) -> _flags & 0x0040 ) != 0 ) : ( ferror ) ( p ) )
 1:(if-exp (not csym::__isthreaded)
 (!= (bit-and (fref (mref csym::p) csym::_flags) 64) 0) (csym::ferror csym::p))
[not typename --- ferror]
 2:(if-exp (not csym::__isthreaded)
 (!= (bit-and (fref (mref csym::p) csym::_flags) 64) 0)
 (cast csym::ferror csym::p))
[typename --- ferror]
Select number? 1
#define clearerr(p) ( ! __isthreaded ? ( ( void ) ( ( p ) -> _flags &= ~ ( 0x0040 | 0x0020 ) ) ) : ( clearerr ) ( p ) )
 1:(if-exp (not csym::__isthreaded)
 (cast void
  (bit-and= (fref (mref csym::p) csym::_flags) (bit-not (bit-or 64 32))))
 (csym::clearerr csym::p))
[not typename --- clearerr]
 2:(if-exp (not csym::__isthreaded)
 (cast void
  (bit-and= (fref (mref csym::p) csym::_flags) (bit-not (bit-or 64 32))))
 (cast csym::clearerr csym::p))
[typename --- clearerr]
Select number? 1
#define fileno(p) ( ! __isthreaded ? ( ( p ) -> _file ) : ( fileno ) ( p ) )
 1:(if-exp (not csym::__isthreaded) (fref (mref csym::p) csym::_file)
 (csym::fileno csym::p))
[not typename --- fileno]
 2:(if-exp (not csym::__isthreaded) (fref (mref csym::p) csym::_file)
 (cast csym::fileno csym::p))
[typename --- fileno]
Select number? 1
#define getc(fp) ( ! __isthreaded ? ( -- ( fp ) -> _r < 0 ? __srget ( fp ) : ( int ) ( * ( fp ) -> _p ++ ) ) : ( getc ) ( fp ) )
 1:(if-exp (not csym::__isthreaded)
 (if-exp (< (-- (fref (mref csym::fp) csym::_r)) 0) (csym::__srget csym::fp)
  (cast int (mref (inc (fref (mref csym::fp) csym::_p)))))
 (csym::getc csym::fp))
[not typename --- getc]
 2:(if-exp (not csym::__isthreaded)
 (if-exp (< (-- (fref (mref csym::fp) csym::_r)) 0) (csym::__srget csym::fp)
  (cast int (mref (inc (fref (mref csym::fp) csym::_p)))))
 (cast csym::getc csym::fp))
[typename --- getc]
Select number? 1
#define putc(x,fp) ( ! __isthreaded ? __sputc ( x , fp ) : ( putc ) ( x , fp ) )
 1:(if-exp (not csym::__isthreaded) (csym::__sputc csym::x csym::fp)
 (csym::putc csym::x csym::fp))
[not typename --- putc]
 2:(if-exp (not csym::__isthreaded) (csym::__sputc csym::x csym::fp)
 (cast csym::putc (c2sc::exps csym::x csym::fp)))
[typename --- putc]
[not typename --- x]
Select number? 1
#define getchar() ( ! __isthreaded ? ( -- ( __stdinp ) -> _r < 0 ? __srget ( __stdinp ) : ( int ) ( * ( __stdinp ) -> _p ++ ) ) : ( getc ) ( __stdinp ) )
 1:(if-exp (not csym::__isthreaded)
 (if-exp (< (-- (fref (mref csym::__stdinp) csym::_r)) 0)
  (csym::__srget csym::__stdinp)
  (cast int (mref (inc (fref (mref csym::__stdinp) csym::_p)))))
 (csym::getc csym::__stdinp))
[not typename --- getc]
 2:(if-exp (not csym::__isthreaded)
 (if-exp (< (-- (fref (mref csym::__stdinp) csym::_r)) 0)
  (csym::__srget csym::__stdinp)
  (cast int (mref (inc (fref (mref csym::__stdinp) csym::_p)))))
 (cast csym::getc csym::__stdinp))
[typename --- getc]
Select number? 1
#define putchar(x) ( ! __isthreaded ? __sputc ( x , __stdoutp ) : ( putc ) ( x , __stdoutp ) )
 1:(if-exp (not csym::__isthreaded) (csym::__sputc csym::x csym::__stdoutp)
 (csym::putc csym::x csym::__stdoutp))
[not typename --- putc]
 2:(if-exp (not csym::__isthreaded) (csym::__sputc csym::x csym::__stdoutp)
 (cast csym::putc (c2sc::exps csym::x csym::__stdoutp)))
[typename --- putc]
[not typename --- x]
Select number? 1

<syslog.h>
#define LOG_PRI(p) ( ( p ) & 0x07 )
 1:(bit-and csym::p 7)
[not typename --- p]
 2:(cast csym::p (ptr 7))
[typename --- p]
Select number? 1

#define LOG_FAC(p) ( ( ( p ) & 0x03f8 ) >> 3 )
 1:(>> (bit-and csym::p 1016) 3)
[not typename --- p]
 2:(>> (cast csym::p (ptr 1016)) 3)
[typename --- p]
Select number? 1

#define LOG_UPTO(pri) ( ( 1 << ( ( pri ) + 1 ) ) - 1 )
 1:(- (<< 1 (+ csym::pri 1)) 1)
[not typename --- pri]
 2:(- (<< 1 (cast csym::pri (+ 1))) 1)
[typename --- pri]
Select number? 1

<sys/ioccom.h>
#define IOCBASECMD(x) ( ( x ) & ~ ( 0x1fff << 16 ) )
 1:(bit-and csym::x (bit-not (<< 8191 16)))
[not typename --- x]
 2:(cast csym::x (ptr (bit-not (<< 8191 16))))
[typename --- x]
Select number? 1

<wctype.h>
#define WEOF ((wint_t)-1)
 1:(- csym::wint_t 1)
[not typename --- wint_t]
 2:(cast csym::wint_t (- 1))
[typename --- wint_t]
Select number? 2

#define iswascii(wc) ( ( ( wc ) & ~ 0x7F ) == 0 )
 1:(== (bit-and csym::wc (bit-not 127)) 0)
[not typename --- wc]
 2:(== (cast csym::wc (ptr (bit-not 127))) 0)
[typename --- wc]
Select number? 1

