/* README.jpeuc:    README file for MCPP in Japanese-EUC encoding   */

1、MCPP とは

  MCPP は次のような特徴を持つ C/C++ プリプロセッサです。

  1.  C90, C99, C++98 のすべてに対応している。動作はきわめて正確である。
  2.  C/C++ プリプロセッサの詳細で網羅的なテストをする検証セットが付属し
    ている。これを適用すると、MCPP は抜群の成績を示す。
  3.  診断メッセージが豊富で的確である。潜在的なバグや portability など、
    ソースのプリプロセス上の問題点をほぼすべてチェックすることができる。
  4.  デバッグ情報を出力する各種の #pragma ディレクティブを持っている。
  5.  Multi-byte character の処理は日本・中国・台湾・韓国の多様な
    encoding に対応している。
  6.  Portable である。UNIX 系・DOS/Windows 系の多くの処理系に対応してお
    り、処理系付属のプリプロセッサと置換して使うことができる。
  7.  ソースからは各種の仕様のプリプロセッサを生成することができる。
  8.  Free software である。
  9.  日本語版と英語版の詳細なドキュメントが付属している。

  MCPP はたぶん世界一優れたＣプリプロセッサです。
  MCPP の開発は、情報処理振興機構 (IPA) の平成１４年度「未踏ソフトウェア
創造事業」に新部 裕・プロジェクトマネージャーによって採択され、2002/07 -
2003/02 の間は IPA からの資金援助を受けて進められました。さらに平成１５
年度「未踏ソフトウェア創造事業」にも伊知地 宏・プロジェクトマネージャに
よって採択され、2003/06 - 2004/02 の間、同様に開発が進められました。
  MCPP と検証セットの概要を知るためには、mcpp-summary.pdf をお読みくださ
い
  ファイルは mcpp-summary.pdf 以外はすべて単なるテキストファイルです。改
行コードは [LF] です。また、この README.jpeuc と doc ディレクトリの日本
語ドキュメントの encoding は EUC-JP です。
  多くのＣプログラマの皆さんの感想・コメント・討論・開発参加をお待ちして
います。

  この README では主として、MCPP のソースをコンパイルして特定の処理系用
のプリプロセッサを生成する方法を説明します。詳細はさらに porting.txt を
見てください。

2、configure と make

  MCPP をコンパイルするには、UNIX 系のシステムおよび CygWIN では
configure スクリプトを使うことができます。mcpp-2.4.1 ディレクトリで

    ./configure; make; make install

とすることで、実行プログラムが生成されてインストールされます。
  実行プログラムを strip するには、make install のかわりに make install-
strip とします。また、ドキュメントと検証セットをインストールするには、

    make install-data

とします。

    make uninstall-data

とすると、ドキュメントと検証セットが削除されます。
  make では次のような名前の２種の異なる動作仕様の MCPP 実行プログラムが
生成されます。

    cpp_std     :   規格準拠の標準仕様
    cpp_poststd :   規格の問題点を整理した MCPP 独自の単純明快な仕様

  さらに --enable-maintainer-mode というオプションを付けて configure し
て make した場合は、次の２つも生成されます。

    cpp_prestd  :   C90 以前の K&R 1st. の仕様
    cpp_old     :   C90 以前の "Reiser" モデルの仕様

  動作仕様については manual.txt を参照してください。

  ただし、処理系によっては configure でいくつかのオプションを指定しない
と、適切なコンパイルとインストールがされません。

2、1、処理系が GNU C の場合

2、1、1、configure と make
  処理系が GNU C の場合は、何もオプションをつけなくても configure によっ
て適切な設定がされます。./configure とした後で make します。make は src
ディレクトリではなく親である mcpp-2.4.1 ディレクトリで行います。

2、1、2、make install
  make install では通常のプログラムの置かれるディレクトリ（/usr/local/
bin 等）のほかに、GNU C のディレクトリ（/usr/libexec, /usr/lib/gcc-lib/
i686-pc-linux-gnu/VERSION 等）にもインストールされます。前者では MCPP は
通常のコマンドとして単独で動かすことができますが、gcc から呼び出されるこ
とはありません。後者は gcc の呼び出す cpp (cpp0) が置かれているディレク
トリです。
  --enable-maintainer-mode オプションで configure した場合、make install
は後者のインストールでは、GNU C / cpp0 を保存した上で、gcc から cpp_std
が呼び出されるように適切な設定をします。この設定は GNU C が V.2.* である
か V.3.* であるかによって違っています（manual.txt [3.9.5], [3.9.7] を参
照のこと）。

2、1、3、make check
  MCPP の検証セットには GNU C の testsuite に対応した edition があります。
GNU C / testsuite がインストールされている場合は、make check によってこ
の testsuite 版検証セットで cpp_std のテストをすることができます。
Testsuite 版検証セットは GNU C / testsuite の一部として使うようになって
いるので、あらかじめ GNU C / testsuite がインストールされ実行できる状態
になっていることが必要です。GNU C / testsuite は通常は GNU C のソースの
一部となっています（別のパッケージとなっている場合もある）。
  また、configure する時に GNU C / testsuite の置かれているディレクトリ
を指定しておく必要があります。そのためには次のようにします。

    ./configure --with-gcc-testsuite-dir=DIR --enable-maintainer-mode

この 'DIR' は GNU C のソースが置かれているディレクトリを GCC_SOURCE とす
ると、

    GCC_SOURCE/gcc/testsuite

となるはずです。
  こうして configure しておいて、make; make install した後で make check
とすると、検証セットの testsuite 版が GNU C / testsuite の中にコピーされ、
GNU C が V.2.* であるか V.3.* であるかに応じて必要な設定がされ、そして
testsuite が実行されます。通常のソフトウェアでは make install の前に
make check しますが、MCPP の場合は順序が逆になります。gcc から cpp_std
が呼び出されるようにしておかないと testsuite が cpp_std に適用できないか
らです。また、このため --enable-maintainer-mode オプションも必要です。
  Testsuite 版検証セットは MCPP だけでなく、GNU C V.2.9x, V.3.* の cpp0
にも適用することができます（cpp-test.txt [2.2.3] 参照）。

2、1、4、make uninstall
  make uninstall とすると、MCPP の実行プログラムは削除されます。
  --enable-maintainer-mode で configure した場合は、make uninstall で
gcc, cpp0 の設定は初期状態に戻ります。何かのつごうで make install した後
で configure を再実行する場合は、その前に make uninstall しなければなり
ません。Configure が調査すべきなのは GNU C であり MCPP ではないからです。

2、2、処理系が GNU C でない場合
  処理系が GNU C でない場合は configure でいくつかのオプションを指定しな
ければなりません。また、その処理系のプリプロセッサと置換して使うためには、
ソースコードを書き足す「移植」作業が必要です。作者自身は Linux, FreeBSD,
CygWIN 等で GNU C を使っているので移植がすんでおり、configure で情報を収
集することもできるのですが、UNIX 系システムの他の処理系については知らな
いので、移植はおろが configure で何をどう調べれば良いのかもわからないか
らです。
  UNIX 系システムの GNU C 以外の処理系では、次のような手順でコンパイルを
進めてください。

2、2、1、オプションを指定して configure
  まず、いくつかのオプションを指定して configure します。

    ./configure --help

とするとオプションが表示されます。処理系固有の事前定義マクロおよび C++
固有のインクルードディレクトリをこれらのオプションで指定します。

2、2、2、make; make install して単独で動かしてみる
  make; make install とすると、MCPP の２種の動作仕様の実行プログラムが通
常のコマンドとして単独で動かすことができるようになります。しかし、この状
態ではその処理系のプリプロセッサとして使うことはできません。

2、2、3、「移植」作業
  処理系のプリプロセッサを MCPP に置き換えて使うためには、ソースコードを
書き足す「移植」作業が必要です。処理系固有の実行時オプションや #pragma
等の実装です。中でもしばしば使われる実行時オプションで MCPP と異なるもの
があれば、最低限、その実装が必要です（porting.txt のことに [4.2] を参照）。

2、2、4、オプションを追加して configure しなおす
  移植ができたら、make uninstall した上で --libexecdir=DIR というオプシ
ョンを追加して configure しなおします。この 'DIR' はコンパイラドライバか
ら呼び出されるプリプロセッサが置かれるディレクトリです。
  そして make; make install して、さらにコンパイラドライバから cpp_std
が呼び出されるように細工をします。その方法については、GNU C での設定方法
を参考にしてください。

2、3、configure の制約
  MCPP のコンパイルではターゲット処理系（MCPP をプリプロセッサとして使う
予定の処理系）の仕様を詳しく知る必要があります。同時に、コンパイルする処
理系についても別の側面の仕様を知る必要があります。MCPP のソースはこの両
者の処理系が違っていてもかまわないように、両者の設定を分けてヘッダファイ
ル (configed.H) を書いてあります。しかし、configure ではこの両者を同時に
調べることができません。そのため、ターゲットとする処理系とコンパイルする
処理系は同じであるという前提で調査をします。
  もしこの両者の処理系が違う場合は、configed.H の Part 2 を編集すること
が必要です。
  MCPP の configure は同様にクロスコンパイルにも対応していません。また、
クロスコンパイルでは実行できないテストもいくつか含まれています。クロスコ
ンパイルではその場合はデフォルト値をセットしますが、うまくゆかないかもし
れません。どちらにしても作者自身はクロスコンパイラを使った経験がないので、
よくわかりません。

3、DOS/Windows 上の処理系での make
  DOS/Windows 上の処理系は CygWIN 以外は configure の対象にならないので、
ソースを修正して make することが必要です。すでに移植ずみの処理系について
は差分ファイルを用意してあるので、これを使ってパッチをあてることができま
す。差分ファイルを使う場合の手順を以下に説明します。
  また、configure の対象になる処理系でも、ヘッダファイルや makefile を直
接、編集することできめのこまかい制御をすることができます。
  なお、DOS/Windows 系では、ファイルの改行コードをあらかじめ変換しておい
てください。

3、1、パッチをあてる
  noconfig というディレクトリに各種処理系用の差分ファイルと makefile が
用意されています。MCPP のソースはデフォルトでは FreeBSD / GNU C 2.95.4
用の設定になっています。差分ファイルはこれをターゲット処理系用に修正する
ものです。Makefile は各処理系に付属する make を使うように書かれています。
  src ディレクトリに入って次のようにします。以下の作業はすべて src ディ
レクトリで行います。

    patch -c < ..\noconfig\which-compiler.dif
    copy ..\noconfig\which-compiler.mak Makefile

  patch は UNIX 系システムのコマンドですが、DOS/Windows にも移植されてい
るので、それを使います。

3、2、必要ならさらに noconfig.H, Makefile を修正する
  使う処理系が差分ファイルのものとはバージョンが違っている場合は、ヘッダ
ファイル noconfig.H にさらに修正を加えます（noconfig.H そのものおよび
porting.txt [3.1] を参照）。通常使う multi-byte character が日本語ではな
い場合も同様に、nocongig.H の MBCHAR というマクロの定義を書き換えます。
  また、処理系のあるディレクトリが Makefile のデフォルトの設定と違ってい
る場合は、その行を修正します。
  もし、ターゲット処理系とコンパイルする処理系とが違っている場合は、
noconfig.H / Part 1 をターゲット処理系の仕様に合わせ、Part 2 をコンパイ
ルする処理系の仕様に合わせます。Makefile はコンパイルする処理系用のもの
を使い、インストールするディレクトリをターゲット処理系用に変更します。

3、3、make と make install
  これで、すでに移植ずみの処理系の場合は問題なく make して make install
できるはずです（Visual C++ では make ではなく nmake を使う）。
  Visual C++ .net では添付の makefile を使って、IDE で「メイクファイルプ
ロジェクト」を作成すると、IDE のソースレベルデバッグ等の機能がすべて使え
ます（manual.txt [2.9] 参照）。

3、4、テスト
  DOS/Windows では GNU C / testsuite は使えないので、test-t, test-c,
test-l ディレクトリにあるテスト用サンプルを直接、プリプロセスして確かめ
ます。tool/cpp_test.c を使うと、一部のテストだけですが、自動的に実行でき
ます（cpp-test.txt [2.2.2] 参照）。
  MCPP 自身をプリプロセッサとして使って、MCPP の "pre-preprocess" という
機能を使って MCPP をリコンパイルしてみると、その処理系でとりあえず使える
ようになったかどうかを確かめることができます（porting.txt [3.7] 参照）。

4、Plan 9 でのコンパイル
  Plan 9 でのコンパイルについては、porting.txt [3.1.11], [3.7.1] を見て
ください。

5、移植のための情報をお寄せください

  MCPP をまだ移植されてない処理系に移植するためには、多くの情報が必要で
す。みなさんの情報をお待ちしています。
  GNU C 以外の処理系について configure のオプションで指定する値がおわか
りのかたは教えてください。configure.ac に取り込んでゆきたいと思います。

6、「検証セット」とは
  MCPP には「検証セット」というものが付属しています。これは C/C++ プリプ
ロセッサについて 265 項目にわたる徹底的なテストと評価をするものです。
MCPP だけでなく任意のプリプロセッサに適用することができます。その使い方
については、cpp-test.txt [2.1], [2.2] を参照してください。

2004/03
                                         松井　潔 <kmatsui@t3.rim.or.jp>

