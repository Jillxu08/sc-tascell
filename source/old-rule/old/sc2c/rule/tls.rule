;;;; スレッドローカルストレージ 副作用無し版
(T1 (,@declaration-list) )
-> (let* ((plist (remove nil (mapcar #'P declaration-list)))
	  (pid-list (mapcar #'par-identifier (mapcar #'second plist))))
     `( (def (struct thread-local-storage) ,@plist)
         ,@(remove nil 
		   (mapcar #'(lambda (dl) (T2 dl pid-list))
			   declaration-list)))))
;;;;;
(P (private ,id[ID] ,@list ) )
-> `(def ,id ,@list)
(P ,otherwise ) -> nil

;;;;;
(T2 (private ,@list) pid-list) -> nil
(T2 (,scs[SCS] ,id[ID] ,texp ,@init) pid-list) 
-> (if (car init)
       `(,scs ,id ,(T2 texp pid-list) ,(T2 (car init) pid-list))
       `(,scs ,id ,(T2 texp pid-list)) )
(T2 (,scs[SCS] (,@id-list[ID]) (fn ,@list1) ,@list2 ) pid-list)
-> `(,scs (,(car id-list) tls ,@(cdr id-list))
     (fn ,(T2 (car list1) pid-list)
      (ptr (struct thread-local-storage))
      ,@(mapcar #'(lambda (dl) (T2 dl pid-list)) (cdr list1)))
     ,@(mapcar #'(lambda (dl) (T2 dl pid-list)) list2) )
(T2 (,d[DEF-DECL] 
     (,struct-or-union ,id[ID]) ,@list) pid-list)
->  `(,d (,struct-or-union ,id) 
      ,@(mapcar #'(lambda (dl) (T2 dl pid-list)) list))
(T2 (,scs[SCS] ,@list) pid-list)
->  `(,scs ,@list)
(T2 (deftype ,id[ID] ,soru[S-OR-U]  ,@list) pid-list)
->  `(deftype ,id ,soru ,@(mapcar #'(lambda (dl) (T2 dl pid-list)) list))
(T2 (deftype ,id[ID] enum ,@list) pid-list)
-> `(deftype ,id enum ,@list)
(T2 (deftype ,id[ID] ,texp) pid-list)
-> `(deftype ,id ,(T2 texp pid-list))
(T2 (,@exp-list[EXPR]) pid-list)
-> `(,(T2 (car exp-list) pid-list)
       tls ,@(mapcar #'(lambda (dl) (T2 dl pid-list)) (cdr exp-list)))
(T2 (fn ,@list) pid-list)
-> `(fn (T2 (car list) pid-list) 
    (ptr (struct thread-local-storage))
     ,@(mapcar #'(lambda (dl) (T2 dl pid-list)) (cdr list)))
(T2 ,exp[EXPR] pid-list)
-> (flet ((id2tls (id) 
	    (if (member (par-identifier id) pid-list :test #'string=)
		`(fref (mref tls) ,id)
		id)))
     (if (consp exp)
	 (if (eq 'fref (car exp))
	     `(fref ,(id2tls (second exp)) ,@(cddr exp))
	     (mapcar #'(lambda (dl) (T2 dl pid-list)) exp))
	 (id2tls exp)))
(T2 (,@list) pid-list)
-> (mapcar #'(lambda (dl) (T2 dl pid-list)) list)
(T2 ,otherwise pid-list)
-> otherwise
