;;; thread local storage
(T1 (,@declaration-list) )
 -> (let ((plist (remove nil 
			 (mapcar #'P declaration-list))))
     `( (def (struct thread_local_storage) ,@plist)
        ,@(remove nil
           (mapcar #'T2 declaration-list))))

(P (private ,@list ) )
 -> `(def ,@list)
(P ,otherwise ) -> nil

(T2 (private ,@list) ) -> nil
(T2 (,scs[SCS] ,id[ID] ,texp &optional ,init) ) 
  -> (if init
         `(,scs ,id ,(T2 texp) ,(T2 init))
         `(,scs ,id ,(T2 texp)) )
(T2 (,scs[SCS] (,@id-list[ID]) 
               (fn ,@list1) ,@list2 ) )
  -> `(,scs (,(car id-list) tls ,@(cdr id-list))
            (fn ,(T2 (car list1))
                (ptr (struct thread-local-storage))
                ,@(mapcar #'T2 (cdr list1)))
            ,@(mapcar #'T2 list2) )
(T2 (,d[DEF-OR-DECL] 
      (,struct-or-union ,id[ID]) ,@list) )
  ->  `(,d (,struct-or-union ,id) 
        ,@(mapcar #'T2 list))
(T2 (,scs ,@list) )
  ->  `(,scs ,@list)
(T2 (deftype ,id[ID] ,soru[S-OR-U]  ,@list) )
  ->  `(deftype ,id ,soru ,@(mapcar #'T2 list))
(T2 (deftype ,id[ID] enum ,@list) )
  -> `(deftype ,id enum ,@list)
(T2 (deftype ,id[ID] ,texp) )
  -> `(deftype ,id ,(T2 texp))
(T2 (,@exp-list[EXP]) )
  -> `(,(T2 (car exp-list)) 
       tls ,@mapcar #'T2 (cdr exp-list))
(T2 (fn ,@list) )
  -> `(fn (T2 (car list)) 
          (ptr (struct thread-local-storage))
              ,@(mapcar #'T2 (cdr list)))
(T2 (@list) )
  -> (mapcar #'T2 list)
(T2 ,otherwise)
  -> x
