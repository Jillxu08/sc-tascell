;;;; スレッドローカルストレージ 副作用あり版
(T1 (,@declaration-list) )
-> (progv '(pid-list) '(nil)
     (let ((plist (remove nil (mapcar #'P declaration-list))))
       `( (def (struct thread-local-storage) ,@plist)
	 ,@(remove nil (mapcar #'T2 declaration-list)))))
;;;;;
(P (private ,id[ID] ,@list ) )
-> (progn
     (push (par-identifier id) pid-list)
     `(def ,id ,@list))
(P ,otherwise ) -> nil

;;;;;
(T2 (private ,@list) ) -> nil
(T2 (,scs[SCS] ,id[ID] ,texp ,@init) ) 
-> (if (car init)
       `(,scs ,id ,(T2 texp) ,(T2 (car init)))
       `(,scs ,id ,(T2 texp)) )
(T2 (,scs[SCS] (,@id-list[ID]) (fn ,@list1) ,@list2 ) )
-> `(,scs (,(car id-list) tls ,@(cdr id-list))
     (fn ,(T2 (car list1))
      (ptr (struct thread-local-storage))
      ,@(mapcar #'T2 (cdr list1)))
     ,@(mapcar #'T2 list2) )
(T2 (,d[DEF-OR-DECL] 
     (,struct-or-union ,id[ID]) ,@list) )
->  `(,d (,struct-or-union ,id) 
      ,@(mapcar #'T2 list))
(T2 (,scs[SCS] ,@list) )
->  `(,scs ,@list)
(T2 (deftype ,id[ID] ,soru[S-OR-U]  ,@list) )
->  `(deftype ,id ,soru ,@(mapcar #'T2 list))
(T2 (deftype ,id[ID] enum ,@list) )
-> `(deftype ,id enum ,@list)
(T2 (deftype ,id[ID] ,texp) )
-> `(deftype ,id ,(T2 texp))
(T2 (,@exp-list[EXP]) )
-> `(,(T2 (car exp-list))
       tls ,@(mapcar #'T2 (cdr exp-list)))
(T2 (fn ,@list) )
-> `(fn (T2 (car list)) 
    (ptr (struct thread-local-storage))
     ,@(mapcar #'T2 (cdr list)))
(T2 ,exp[EXP] )
-> (flet ((id2tls (id) 
	    (if (member (par-identifier id) pid-list :test #'string=)
		`(fref (ptr tls) ,id)
		id)))
     (if (consp exp)
	 (if (eq 'fref (car exp))
	     `(fref ,(id2tls (second exp)) ,@(cddr exp))
	     (mapcar #'T2 exp))
	 (id2tls exp)))
(T2 (,@list) )
-> (mapcar #'T2 list)
(T2 ,otherwise)
-> x
