;;;; sc0 => sc0
;;;; 関数内の全ての識別子名が異なるように名前を変換
(define-ruleset rename (sc0-to-sc0))

(scr:require "RENAME-DEFS")

;; ;;; <- マルチスレッド用プリミティブ
;;   ((#?(thread-create ,decl-list ,@body) )
;; -> (ren:inc-block-level
;;     (let* ((new-decl-list (mapcar #'declaration decl-list))
;; 	   (new-body (function-body body)))
;;       ~(thread-create ,new-decl-list ,@new-body)))

;;   ((#?(thread-suspend ,id[identifier] ,@body) )
;; -> (ren:inc-block-level
;;     (let* ((ren:repl-id (ren:bind-id id))
;; 	   (new-body (function-body body)))
;;       ~(thread-suspend ,ren:repl-id ,@new-body)))

;;   ((#?(thread-resume ,exp) )
;; -> ~(thread-resume ,(ren:repl-id exp) )

;; ;;; マルチスレッド用プリミティブ ->

(defrule sc-program rename
  ((#?(,@declaration-list) )
   (ren:with-rename-environment
       (mapcar #'declaration declaration-list)))
  )

;;;;;; declaration ;;;;;;
(defrule declaration rename
  ;;variable (length of init is probably 1)
  ((#?(,scs[storage-class-specifier] ,id[identifier] ,texp ,@init) )
   (let ((id-repl (ren:bind-id id)))
     ~(,scs ,id-repl ,texp ,@(ren:repl-id init))) )
  ;;function
  ((#?(,scs[storage-class-specifier]
       (,@id-list[identifier]) (,fntag[function-tag] ,@texp-list) ,@body))
   (let ((funcid-repl (ren:bind-id (car id-list))))
     (ren:begin-function
      (let* ((arg-list-repl (ren:bind-id (cdr id-list)))
	     (body-repl (function-body body)))
	~(,scs (,funcid-repl ,@arg-list-repl) (,fntag ,@texp-list)
	  ,@body-repl)))) )
  ;;struct, union
  ((#?(,dd[def-or-decl] (,soru[struct-or-union] ,id[identifier]) ,@sdeclist) )
   (let ((id-repl (ren:bind-id id)))
     ~(,dd (,soru ,id-repl) ,@sdeclist)) )
  ;;enum
  ((#?(def (enum ,id[identifier]) ,@enum-list) )
   (let ((id-repl (ren:bind-id id))
	 (enum-list-repl
	  (mapcar #'(lambda (en)
		      (if (listp en)
			  (cons (ren:bind-id (car en)) (cdr en))
			(ren:bind-id en)))
		  enum-list)))
     ~(def (enum ,id-repl) ,@enum-list-repl)) )
  ;;deftype (struct)
  ((#?(deftype ,id[identifier] struct ,@sdecllist) )
   (let ((id-repl (ren:bind-id id)))
     ~(deftype ,id-repl struct ,@sdecllist)) )
  ;;deftype (enum)
  ((#?(deftype ,id[identifier] enum ,@enum-list) )
   (let ((id-repl (ren:bind-id id))
	 (enum-list-repl
	  (mapcar #'(lambda (en)
		      (if (listp en)
			  (cons (ren:bind-id (car en)) (cdr en))
			(ren:bind-id en)))
		  enum-list)))
     ~(deftype ,id-repl enum ,@enum-list-repl)) )
  ;;deftype
  ((#?(deftype ,id[identifier] ,texp) )
   (let ((id-repl (ren:bind-id id)))
     ~(deftype ,id-repl ,texp)))
  ;;c-exp
  ((#?(c-exp ,@rem))
   ~(c-exp ,@rem))
  ;;
  (otherwise nil)
  )

;;;;;;; body +α ;;;;;;
(defrule function-body rename
  ;; function-attribute & register-decl
  ((#?(:attr ,atr   ,@body) )
   ~(:attr ,atr ,@(function-body body)) )
  ((#?((register ,@regarg)   ,@body) )
   ~((register ,@(ren:repl-id regarg)) ,@(function-body body)) )
  ((#?(,@body))
   (mapcar #'block-item body) ))

(defrule block-item rename
  ;;begin
  ((#?(begin ,@body) )
   (ren:inc-block-level
    ~(begin ,@(function-body body))) )
  ;;label
  ((#?(label ,id ,stat) )
   ~(label ,id ,(block-item stat)) )
  ;;case
  ((#?(case ,exp) )
   ~(case ,(ren:repl-id exp)) )
  ;;default
  ((#?(default) )
   ~(default) )
  ;;if
  ((#?(if ,exp ,stat1 {,stat2}) )
   (if (pattern-variable-p 'stat2)
       ~(if ,(ren:repl-id exp) ,(block-item stat1) ,(block-item stat2))
     ~(if ,(ren:repl-id exp) ,(block-item stat1))) )
  ;;switch
  ((#?(switch ,exp ,@body) )
   ~(switch ,(ren:repl-id exp)
	    ,@(ren:inc-block-level (function-body body))) )
  ;;do-while
  ((#?(do-while ,exp ,@body) )
   ~(do-while ,(ren:repl-id exp)
	      ,@(ren:inc-block-level (function-body body))) )
  ;;goto, continue, break
  ((#?(goto ,id) #?(continue) #?(break) )
   x)
  ;;return
  ((#?(return {,exp}) )
   (if (pattern-variable-p 'exp)
       ~(return ,(ren:repl-id exp))
       ~(return) ) )
  ;; null-statement
  ((#?() )
   ~() )
  ;; c-expression
  ((#?(c-exp ,str ,@exp-list) )
   ~(c-exp ,str ,@(mapcar #'ren:repl-id exp-list)) )
  ;; expression-statement or declaration
  (otherwise
   (aif (declaration x)
	it
	(ren:repl-id x)) )
  )
