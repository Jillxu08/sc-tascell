%% 2002/10/25 にOPAメーリングリストに流したもの
\documentstyle[a4j]{jarticle}

\begin{document}

%------------------------------------------------------------------------------
\section{External Definitions}

\it \noindent
translation-unit: \\
\quad external-declaration \\
\quad translation-unit external-declaration \\

%% renew
\noindent
external-declaration: \\
\quad function-definition \\
\quad type-definition \\
\quad declaration \\

%% renew
\noindent
function-definition: \\
\quad {\tt (defun} identifier type-modifier-list$_{opt}$ type-expression {\tt (}parameter-type-list$_{opt}${\tt )} compound-statement {\tt )} \\

\noindent
declaration-list: \\
\quad declaration \\
\quad declaration-list declaration \\ 

%------------------------------------------------------------------------------
\rm
\section{Declarations}

%% renew
\it \noindent
declaration: \\
\quad {\tt (declare} init-declarator-list type-modifier-list$_{opt}$ type-expression {\tt )} \\

%% delete
%\noindent
%declaration-specifiers: \\
%\quad storage-class-specifier declaration-specifiers$_{opt}$ \\
%\quad type-specifier declaration-specifiers$_{opt}$ \\
%\quad type-qualifier declaration-specifiers$_{opt}$ \\
%\quad function-specifier declaration-specifiers$_{opt}$ \\ 

\noindent
init-declarator-list: \\
\quad init-declarator \\
\quad init-declarator-list init-declarator \\ 

%% renew
\noindent
init-declarator: \\
\quad identifier \\
\quad {\tt (} identifier initializer {\tt )} \\ 

%% new
\noindent
type-definition: \\
\quad {\tt (deftype} identifier type-qualifier-list$_{opt}$ type-expression {\tt )} \\

%% new
\noindent
type-expression: \\
\quad type-specifier \\
\quad {\tt (array} type-expression array-subscription-list$_{opt}$ {\tt )} \\
\quad {\tt (} ref-list type-expression {\tt )} \\
\quad {\tt (function} type-expression {\tt (} parameter-type-list$_{opt}$ {\tt )} {\tt )} \\

%% new
\noindent
type-modifier-list: \\
\quad storage-class-specifier type-modifier-list$_{opt}$ \\
\quad type-qualifier type-modifier-list$_{opt}$ \\
\quad function-specifier type-modifier-list$_{opt}$ \\

%% new
\noindent
array-subscription-list: \\
\quad {\tt undef} expression-list$_{opt}$ \\
\quad expression-list \\

%% new
\noindent
ref-list: \\
\quad {\tt ref} \\
\quad ref-list {\tt ref} \\

%% renew
\noindent
storage-class-specifier: \\ \tt
\quad extern \\
\quad static \\
\quad auto \\
\quad register \\ \it

%% renew
\noindent
type-specifier: \\ \tt
\quad void \\
\quad char \\
\quad signed-char \\
\quad unsigned-char \\
\quad short \\
\quad signed-short \\
\quad unsigned-short \\
\quad int \\
\quad signed-int \\
\quad unsigned-int \\
\quad long \\
\quad signed-long \\
\quad unsigned-long \\
\quad long-long \\
\quad signed-long-long \\
\quad unsigned-long-long \\
\quad float \\
\quad double \\
\quad long-double \\ \it
\quad struct-or-union-specifier \\
\quad enum-specifier \\
\quad typedef-name \\

%% correct renew
\noindent
struct-or-union-specifier: \\
\quad {\tt (} struct-or-union struct-declaration-list  {\tt )} \\
\quad {\tt (} struct-or-union identifier {\tt )} \\

\noindent
struct-or-union: \\ \tt
\quad struct \\
\quad union \\ \it

\noindent
struct-declaration-list: \\
\quad struct-declaration \\
\quad struct-declaration-list struct-declaration \\

%% renew
\noindent
struct-declaration: \\
\quad {\tt (} identifier-list type-qualifier-list$_{opt}$ type-expression {\tt )} \\
\quad {\tt (} identifier-list$_{opt}$ type-qualifier-list$_{opt}$ type-expression {\tt bit} expression {\tt )} \\


%% delete
%\noindent
%specifier-qualifier-list: \\
%\quad type-specifier specifier-qualifier-list$_{opt}$ \\
%\quad type-qualifier specifier-qualifier-list$_{opt}$ \\

% \noindent
%struct-declarator-list: \\
%\quad struct-declarator \\
%\quad struct-declarator-list struct-declarator \\

% \noindent
%struct-declarator: \\
%\quad declarator \\
%??? --> \quad declarator${_opt}$ : assignment-expression \\

\noindent
enum-specifier: \\
\quad {\tt (enum} {\tt (}enumerator-list{\tt )} {\tt )} \\
\quad {\tt (enum} {\tt (}enumerator-list {\tt ,}{\tt )} {\tt )} \\
\quad {\tt (enum} identifier {\tt )} \\

\noindent
enumerator-list: \\
\quad enumerator \\
\quad enumerator-list enumerator \\

%% correct
\noindent
enumerator: \\
\quad enumeration-constant \\
\quad {\tt (} enumeration-constant expression {\tt )}\\

%% new
\noindent
enmuration-constant: \\
\quad identifier \\

\noindent
type-qualifier: \\ \tt
\quad const \\
\quad restrict \\
\quad volatile \\ \it

\noindent
function-specifier: \\ \tt
\quad inline \\ \it

%% delete
%\noindent
%declarator: \\
%\quad direct-declarator \\
%\quad {\tt (ref} type-qualifier-list declarator {\tt )} \\

\noindent
type-qualifier-list: \\
\quad type-qualifier \\
\quad type-qualifier-list type-qualifier \\

%% delete
%\noindent
%direct-declarator: \\
%\quad identifier \\
%\quad {\tt (} declarator {\tt )} \\
%\quad {\tt (array} type-qualifier-list$_{opt}$ assignment-expression$_{opt}$ direct-declarator {\tt )} \\
%\quad {\tt (array} {\tt static} type-qualifier-list$_{opt}$ assignment-expression direct-declarator {\tt )} \\
%\quad {\tt (array} type-qualifier-list {\tt static} assignment-expression direct-declarator {\tt )} \\
%\quad {\tt (array} {\tt ref} type-qualifier-list$_{opt}$ direct-declarator {\tt )} \\
%\quad {\tt (} direct-declarator {\tt (}parameter-type-list{\tt )} {\tt )} \\
%\quad {\tt (} direct-declarator {\tt (}identifier-list{\tt )} {\tt )} \\

\noindent
parameter-type-list: \\
\quad parameter-list \\
\quad parameter-list {\tt ...} \\

\noindent
parameter-list: \\
\quad parameter-declaration \\
\quad parameter-list parameter-declaration \\

%% renew
\noindent
parameter-declaration: \\
\quad {\tt (} identifier$_{opt}$ type-qualifier-list$_{opt}$ type-expression {\tt )} \\
\quad identifier \\
\quad type-expression \\

\noindent
identifier-list: \\
\quad identifier \\
\quad identifier-list identifier \\

%% delete
%\noindent
%type-name: \\
%\quad specifier-qualifier-list abstract-declarator$_{opt}$ \\

%% delete
%\noindent
%abstract-declarator: \\
%\quad direct-abstract-declarator \\
%\quad {\tt (ref} type-qualifier-list$_{opt}$ abstract-declarator {\tt )} \\

%% delete
%\noindent
%direct-abstract-declarator: \\
%\quad {\tt (} abstract-declarator {\tt )} \\
%\quad {\tt (array} assignment-expression$_{opt}$ direct-abstract-declarator$_{opt}$ {\tt )} \\
%\quad {\tt (array} {\tt ref} direct-abstract-declarator$_{opt}$ {\tt )} \\
%\quad {\tt (} direct-abstract-declarator$_{opt}$ {\tt (}parameter-type-list{\tt )} {\tt )} \\

\noindent
typedef-name: \\
\quad identifier \\

\noindent
initializer: \\
\quad expression \\
\quad {\tt (} initializer-list {\tt )} \\ 
\quad {\tt (} initializer-list {\tt ,} {\tt )} \\

%% renew
\noindent
initializer-list: \\
\quad designated-initializer initializer-list$_{opt}$ \\
\quad initializer initializer-list$_{opt}$ \\

%% new
\noindent
designated-initializer: \\
\quad {\tt (part} identifier-list initializer {\tt )} \\
\quad {\tt (aref} expression-list initializer {\tt )} \\


%------------------------------------------------------------------------------
\rm
\section{Statements}

\it
\noindent
statement: \\
\quad labeled-statement \\
\quad compound-statement \\
\quad expression-statement \\
\quad selection-statement \\
\quad iteration-statement \\
\quad jump-statement \\

\noindent
labeled-statement: \\
\quad {\tt (label} identifier statement {\tt )} \\
\quad {\tt (case} expression statement {\tt )} \\
\quad {\tt (default} statement {\tt )} \\

%% corrected
\noindent
compound-statement: \\
\quad {\tt (} {\tt begin} block-item-list$_{opt}$ {\tt )} \\

\noindent
block-item-list: \\
\quad block-item \\
\quad block-item-list block-item \\

\noindent
block-item: \\
\quad declaration \\
\quad statement \\

\noindent
expression-statemt: \\
\quad expression$_{opt}$ \\

\noindent
selection-statement: \\
\quad {\tt (if} expression statement statement$_{opt}$ {\tt )} \\
\quad {\tt (switch} expression statement {\tt )} \\

%% correct
\noindent
iteration-statement: \\
\quad {\tt (while} expression statement {\tt )} \\
\quad {\tt (do} statent {\tt while} expression {\tt )} \\
\quad {\tt (for} {\tt (}expression$_{opt}${\tt )} {\tt (}expression$_{opt}${\tt )} {\tt (}expression$_{opt}${\tt )} statement {\tt )} \\
\quad {\tt (for} declaration {\tt (}expression$_{opt}${\tt )} {\tt (}expression$_{opt}${\tt )} statement {\tt )} \\

\noindent
jump-statement: \\
\quad {\tt (goto} identifier {\tt )} \\
\quad {\tt continue} \\
\quad {\tt break} \\
\quad {\tt (return} expression$_{opt}$ {\tt )}

%------------------------------------------------------------------------------
\rm
\section{Expressions}
\it

%% combined from 'primary-' to 'assignment-' into 'expression'


%% delete
%\noindent
%argument-expression-list: \\
%\quad assignment-expression \\
%\quad {\tt (} argument-expression-list assignment-expression {\tt )} \\


\noindent
expression: \\
\quad identifier \\
\quad constant \\
\quad string-literal \\
\quad {\tt (} expression {\tt )} \\
\quad {\tt (aref} expression  expression-list {\tt )} \\
\quad {\tt (} expression expression-list$_{opt}$ {\tt )} \\
\quad {\tt (part} expression expression-list {\tt )} \\
\quad {\tt (fref} expression expression-list {\tt )} \\
\quad {\tt (inc} expression {\tt )} \\
\quad {\tt (dec} expression {\tt )} \\
\quad {\tt (compound} expression {\tt (}initializer-list{\tt )} {\tt )} \\
\quad {\tt (compound} expression {\tt (}initializer-list {\tt ,} {\tt )} {\tt )} \\
\quad {\tt (++} experssion {\tt )} \\
\quad {\tt (--} expression {\tt )} \\
\quad {\tt (} unary-operator expression {\tt )} \\
\quad {\tt (sizeof} expression {\tt )} \\
\quad {\tt (sizeof} type-expression {\tt )} \\
\quad {\tt (cast} type-expression expression {\tt )} \\
\quad {\tt (*} expression expression-list {\tt )} \\
\quad {\tt (/} expression expression-list {\tt )} \\
\quad {\tt (\%} expression expression-list {\tt )} \\
\quad {\tt (+} expression expression-list {\tt )} \\
\quad {\tt (-} expression expression-list {\tt )} \\
\quad {\tt (<<} expression expression-list {\tt )} \\
\quad {\tt (>>} expression expression-list {\tt )} \\
\quad {\tt (<} expression expression-list {\tt )} \\
\quad {\tt (>} expression expression-list {\tt )} \\
\quad {\tt (<=} expression expression-list {\tt )} \\
\quad {\tt (>=} expression expression-list {\tt )} \\
\quad {\tt (==} expression expression-list {\tt )} \\
\quad {\tt (!=} expression expression-list {\tt )} \\
\quad {\tt (bit-xor} expression expression-list {\tt )} \\
\quad {\tt (bit-and} expression expression-list {\tt )} \\
\quad {\tt (bit-or} expression expression-list {\tt )} \\
\quad {\tt (and} expression expression-list {\tt )} \\
\quad {\tt (or} expression expression-list {\tt )} \\
\quad {\tt (?:} expression expression expression {\tt )} \\
\quad {\tt (} assignment-operator expression expression-list {\tt )} \\
\quad {\tt (progn} expression-list {\tt )} \\

%% correct
\noindent
expression-list: \\
\quad expression \\
\quad expression-list expression \\

\noindent
assignment-operator: \\ \tt
\quad = \\
\quad *= \\
\quad /= \\
\quad \%= \\
\quad += \\
\quad -= \\
\quad <<= \\
\quad >>= \\
\quad and= \\
\quad xor= \\
\quad or= \\ \it



\noindent
expression-list: \\
\quad expression \\
\quad expression-list expression \\


%% rename
\noindent
unary-operator: \\ \tt
\quad ref \\
\quad deref \\
\quad plus \\
\quad minus \\
\quad cmp \\
\quad not \\ \it


%% delete
%\noindent
%constant-expression: \\
%\quad cast-expression \\
%\quad {\tt (*} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (/} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (\%} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (+} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (-} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (<<} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (>>} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (<} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (>} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (<=} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (>=} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (==} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (!=} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (bit-xor} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (bit-and} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (bit-or} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (and} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (or} constant-expression constant-expression-list {\tt )} \\
%\quad {\tt (?:} constant-expression expression constant-expression {\tt )} \\

%% delete
%\noindent
%constant-expression-list: \\
%\quad constant-expression \\
%\quad constant-expression-list constant-expression \\

\end{document}
