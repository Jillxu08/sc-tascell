%% 2002/11/5 Tue. OPAミーティングで発表したVersion
\documentstyle[a4j]{jarticle}

\begin{document}
	
\newcommand{\opt}{$_{opt}$}

%------------------------------------------------------------------------------
\section{External Definitions}

\it \noindent
translation-unit: \\
\quad external-declaration \\
\quad translation-unit external-declaration \\

%% renew
\noindent
external-declaration: \\
\quad declaration \\

%% delete
%\noindent
%function-definition: \\
%\quad {\tt (}storage-class-specifier\opt {\tt (}identifier-list{\tt )} {\tt (}parameter-type-list{\tt )} compound-statement {\tt )} \\


%------------------------------------------------------------------------------
\rm 
\section{Declarations}
\it 

\noindent
declaration-list: \\
\quad declaration \\
\quad declaration-list declaration \\ 

%% renew
\noindent
declaration: \\
\quad inline-declaration \\
\quad {\tt (}identifier type-expression initializer-list\opt {\tt )} \\
\quad {\tt (}{\tt (}identifier-list{\tt )} {\tt (fn} type-expression-list {\tt va-arg}\opt{\tt )} {\rm [}{\tt :attr} function-attribute{\rm ]}\opt register-declarator\opt block-item-list\opt {\tt )} \\ 
\quad {\tt (}{\tt (}struct-or-union identifier {\tt )} struct-declaration-list\opt {\tt )} \\
\quad {\tt (}{\tt (enum} identifier {\tt )} enumerator-list {\tt )} \\

%% new
\noindent
inline-declaration-list: \\
\quad inline-declaration \\
\quad inline-declaration-list declaration \\ 

%% new
\noindent
inline-declaration: \\
\quad {\tt (}storage-class-specifier identifier type-expression initializer-list\opt {\tt )} \\
\quad {\tt (}storage-class-specifier {\tt (}identifier-list{\tt )} {\tt (fn} type-expression-list {\tt va-arg}\opt{\tt )} {\rm [}{\tt :attr} function-attribute{\rm ]}\opt register-declarator\opt block-item-list\opt {\tt )} \\ 
\quad {\tt (}def-or-decl {\tt (}struct-or-union identifier {\tt )} struct-declaration-list\opt {\tt )} \\
\quad {\tt (def} {\tt (enum} identifier {\tt )} enumerator-list {\tt )} \\
\quad {\tt (}compound-storage-class-specifier type-expression init-declarator-list {\tt )} \\
\quad {\tt (deftype} identifier type-expression {\tt )} \\
\quad {\tt (deftype} identifier struct-or-union struct-declaration-list\opt {\tt )} \\
\quad {\tt (deftype} identifier {\tt enum} enumerator-list {\tt )} \\

\noindent
init-declarator-list: \\
\quad init-declarator \\
\quad init-declarator-list init-declarator \\ 

\noindent
init-declarator: \\
\quad identifier \\
\quad {\tt (}identifier initializer-list{\tt )} \\ 

%% combined with inline-declaration
%\noindent
%type-definition: \\
%\quad {\tt (deftype} identifier type-qualifier-list\opt type-expression {\tt )} \\

%% renew
\noindent
type-expression: \\
\quad type-specifier \\
\quad {\tt (}type-qualifier-list type-expression {\tt )} \\
\quad {\tt (array} type-expression array-subscription-list\opt {\tt )} \\
\quad {\tt (ptr}  type-expression {\tt )} \\
\quad {\tt (fn} type-expression-list {\tt va-arg}\opt {\rm [}{\tt :attr} function-attribute{\rm ]}\opt {\tt )} \\

%% delete
%\noindent
%type-modifier-list: \\
%\quad storage-class-specifier type-modifier-list\opt \\
%\quad type-qualifier type-modifier-list\opt \\
%\quad function-specifier type-modifier-list\opt \\

\noindent
array-subscription-list: \\
%% \quad {\tt undef} expression-list\opt \\
\quad expression-list \\

%% renew
\noindent
storage-class-specifier: {\rm one of} \\  \tt
\quad def extern extern-def extern-decl static static-def \\
\quad auto auto-def register register-def \\ \it

%% new
\noindent
compound-storage-class-specifier: {\rm one of} \\ \tt
\quad defs extern-defs static-defs auto-defs register-defs \\ \it

%% new
\noindent
function-attribute: \\ \tt
\quad inline \\ \it

%% new
\noindent
register-declarator: \\
\quad {\tt (register} identifier-list{\tt )} \\


\noindent
type-specifier: {\rm one of} \\ \tt
\quad void \\
\quad char signed-char unsigned-char \\
\quad short signed-short unsigned-short \\
\quad int signed-int unsigned-int \\
\quad long signed-long unsigned-long \\
\quad long-long signed-long-long unsigned-long-long \\
\quad float double long-double \\ \it
\quad struct-or-union-specifier \\
\quad enum-specifier \\
\quad typedef-name \\

%% renew
\noindent
struct-or-union-specifier: \\
\quad {\tt (}struct-or-union identifier {\tt )} \\

\noindent
struct-or-union: \\ \tt
\quad struct \\
\quad union \\ \it

\noindent
struct-declaration-list: \\
\quad struct-declaration \\
\quad struct-declaration-list struct-declaration \\

%% renew
\noindent
struct-declaration: \\
\quad declaration {\rm [}{\tt :bit} expresion{\rm ]}\opt \\

%% renew
\noindent
enum-specifier: \\
\quad {\tt (enum} identifier {\tt )} \\

\noindent
enumerator-list: \\
\quad enumerator \\
\quad enumerator-list enumerator \\


\noindent
enumerator: \\
\quad enumeration-constant \\
\quad {\tt (}enumeration-constant expression {\tt )}\\

\noindent
enmuration-constant: \\
\quad identifier \\

\noindent
type-qualifier-list: \\
\quad type-qualifier \\
\quad type-qualifier-list type-qualifier \\

\noindent
type-qualifier: \\ \tt
\quad const \\
\quad restrict \\
\quad volatile \\ \it

%% delete
%\noindent
%function-specifier: \\ \tt
%\quad inline \\ \it


%% delete
%\noindent
%parameter-type-list: \\
%\quad parameter-list \\
%\quad parameter-list {\tt ...} \\

%% delete
%\noindent
%parameter-list: \\
%\quad parameter-declaration \\
%\quad parameter-list parameter-declaration \\

%% delete
%\noindent
%parameter-declaration: \\
%\quad {\tt (}identifier\opt type-qualifier-list\opt type-expression {\tt )} \\
%\quad identifier \\
%\quad type-expression \\

\noindent
identifier-list: \\
\quad identifier \\
\quad identifier-list identifier \\

\noindent
typedef-name: \\
\quad identifier \\

\noindent
initializer: \\
\quad expression \\
\quad {\tt (}initializer-list {\tt )} \\


\noindent
initializer-list: \\
\quad {\tt (}designator initializer {\tt )} initializer-list\opt \\
\quad initializer initializer-list\opt \\

%% renew
\noindent
designator: \\
\quad {\tt (part} identifier-list designator\opt {\tt )} \\
\quad {\tt (aref} expression-list designator\opt {\tt )} \\

%------------------------------------------------------------------------------
\rm
\section{Statements}

\it
%% renew
\noindent
statement: \\
\quad compound-statement \\
\quad expression-statement \\
\quad selection-statement \\
\quad iteration-statement \\
\quad jump-statement \\
\quad labeled-statement \\

%% renew
\noindent
compound-statement: \\
\quad {\tt (}{\tt begin} block-item-list\opt {\tt )} \\
\quad {\tt (}{\tt let} {\tt (}declaration-list\opt {\tt )} block-item-list\opt {\tt )} \\

\noindent
block-item-list: \\
\quad block-item \\
\quad block-item-list block-item \\

%% renew
\noindent
block-item: \\
\quad inline-declaration \\
\quad statement \\

%% renew
\noindent
labeled-statement: \\
\quad {\tt (label} identifier statemtnt\opt {\tt )} \\
\quad {\tt (case} expression statement\opt {\tt )} \\
\quad {\tt (default} statement\opt{\tt )} \\
\quad {\tt default} \\

\noindent
expression-statemt: \\
\quad expression\opt \\

\noindent
selection-statement: \\
\quad {\tt (if} expression statement statement\opt {\tt )} \\
\quad {\tt (switch} expression block-item-list\opt {\tt )} \\

%% renew
\noindent
iteration-statement: \\
\quad {\tt (while} expression block-item-list\opt {\tt )} \\
\quad {\tt (do-while} expression block-item-list\opt {\tt )} \\
\quad {\tt (for} {\tt (}expression-list\opt expression expression {\tt )} block-item-list\opt {\tt )} \\
\quad {\tt (for} {\tt (}inline-declaration-list\opt expression expression {\tt )} block-item-list\opt {\tt )} \\

\noindent
jump-statement: \\
\quad {\tt (goto} identifier {\tt )} \\
\quad {\tt continue} \\
\quad {\tt break} \\
\quad {\tt (return} expression\opt {\tt )}

%------------------------------------------------------------------------------
\rm
\section{Expressions}
\it

%% renew
\noindent
expression: \\
\quad identifier \\
\quad constant \\
\quad string-literal \\
\quad {\tt (}expression-list\opt {\tt )} \\
\quad {\tt (aref} expression-list {\tt )} \\
\quad {\tt (part} expression-list {\tt )} \\
\quad {\tt (fref} expression-list {\tt )} \\
\quad {\tt (inc} expression {\tt )} \\
\quad {\tt (dec} expression {\tt )} \\
\quad {\tt (cmpd} type-expression {\tt (}initializer-list{\tt )} {\tt )} \\
\quad {\tt (++} experssion {\tt )} \\
\quad {\tt (--} expression {\tt )} \\
\quad {\tt (}unary-operator expression {\tt )} \\
\quad {\tt (sizeof} expression {\tt )} \\
\quad {\tt (sizeof} type-expression {\tt )} \\
\quad {\tt (cast} type-expression expression {\tt )} \\
\quad {\tt (}operator expression-list {\tt )} \\
\quad {\tt (if-exp} expression expression expression {\tt )} \\
\quad {\tt (}assignment-operator expression-list {\tt )} \\
\quad {\tt (exps} expression-list {\tt )} \\


\noindent
expression-list: \\
\quad expression \\
\quad expression-list expression \\

%% new
\noindent
operator: {\rm one of} \\ \tt
\quad * / \% + - << >> < > <= >= == != \\
\quad bit-xor bit-and bit-or and or \\ \it

\noindent
assignment-operator: {\rm one of} \\ \tt
\quad = *= /= \%= += -= <<= >>= and= xor= or= \\ \it

\noindent
expression-list: \\
\quad expression \\
\quad expression-list expression \\

%% renew
\noindent
unary-operator: {\rm one of} \\ \tt
\quad ptr mref cmpl not \\ \it


\end{document}
