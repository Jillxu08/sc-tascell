%% 2002/10/8 Tue. OPAミーティングで発表r

\documentstyle[a4j]{jarticle}

\begin{document}

%------------------------------------------------------------------------------
\section{External Definitions}

\it \noindent
translation-unit: \\
\quad external-declaration \\
\quad translation-unit external-declaration \\

\noindent
external-declaration: \\
\quad function-definition \\
\quad declaration \\

\noindent
function-definition: \\
\quad {\tt (defun} {\tt (}declaration-specifiers{\tt )} declarator {\tt (}declaration-list$_{opt}${\tt )} compound-statement {\tt )} \\ 

\noindent
declaration-list: \\
\quad declaration \\
\quad declaration-list declaration \\ 

%------------------------------------------------------------------------------
\rm
\section{Declarations}

\it \noindent
declaration: \\
\quad {\tt (declare} {\tt (}declaration-specifiers{\tt )} {\tt (}init-declarator-list$_{opt}${\tt )} {\tt )} \\ 

\noindent
declaration-specifiers: \\
\quad storage-class-specifier declaration-specifiers$_{opt}$ \\
\quad type-specifier declaration-specifiers$_{opt}$ \\
\quad type-qualifier declaration-specifiers$_{opt}$ \\
\quad function-specifier declaration-specifiers$_{opt}$ \\ 

\noindent
init-declarator-list: \\
\quad init-declarator \\
\quad init-declarator-list init-declarator \\ 

\noindent
init-declarator: \\
\quad declarator \\
\quad {\tt (} declarator initializer {\tt )} \\ 

\noindent
storage-class-specifier: \\ \tt
\quad typedef \\
\quad extern \\
\quad static \\
\quad auto \\
\quad register \\ \it

\noindent
type-specifier: \\ \tt
\quad void \\
\quad char \\
\quad short \\
\quad int \\
\quad long \\
\quad float \\
\quad double \\
\quad signed \\
\quad unsigned \\
\quad \_Bool \\
\quad \_Complex \\
\quad \_Imaginary \\ \it
\quad struct-or-union-specifier \\
\quad enum-specifier \\
\quad typedef-name \\

\noindent
struct-or-union-specifier: \\
\quad {\tt (} struct-or-union identifier$_{opt}$ {\tt (}struct-declaration-list{\tt )} {\tt )} \\
\quad struct-or-union identifier \\

\noindent
struct-or-union: \\ \tt
\quad struct \\
\quad union \\ \it

\noindent
struct-declaration-list: \\
\quad struct-declaration \\
\quad struct-declaration-list struct-declaration \\

\noindent
struct-declaration: \\
\quad {\tt (}specifier-qualifier-list{\tt )} {\tt (}struct-declarator-list{\tt )} \\

\noindent
specifier-qualifier-list: \\
\quad type-specifier specifier-qualifier-list$_{opt}$ \\
\quad type-qualifier specifier-qualifier-list$_{opt}$ \\

\noindent
struct-declarator-list: \\
\quad struct-declarator \\
\quad struct-declarator-list struct-declarator \\

\noindent
struct-declarator: \\
\quad declarator \\
%??? --> \quad declarator${_opt}$ : constant-expression \\

\noindent
enum-specifier: \\
\quad {\tt (enum} identifier$_{opt}$ {\tt (}enumerator-list{\tt )} {\tt )} \\
\quad {\tt (enum} identifier$_{opt}$ {\tt (}enumerator-list {\tt ,}{\tt )} {\tt )} \\
\quad {\tt (enum} identifier {\tt )} \\

\noindent
enumerator-list: \\
\quad enumerator \\
\quad enumerator-list enumerator \\

\noindent
enumerator: \\
\quad enumeration-constant \\
\quad enumeration-constant constant-expression \\

\noindent
type-qualifier: \\ \tt
\quad const \\
\quad restrict \\
\quad volatile \\ \it

\noindent
function-specifier: \\ \tt
\quad inline \\ \it

\noindent
declarator: \\
\quad direct-declarator \\
\quad {\tt (ref} type-qualifier-list declarator {\tt )} \\

\noindent
type-qualifier-list: \\
\quad type-qualifier \\
\quad type-qualifier-list type-qualifier \\

\noindent
direct-declarator: \\
\quad identifier \\
\quad {\tt (} declarator {\tt )} \\
\quad {\tt (array} type-qualifier-list$_{opt}$ assignment-expression$_{opt}$ direct-declarator {\tt )} \\
\quad {\tt (array} {\tt static} type-qualifier-list$_{opt}$ assignment-expression direct-declarator {\tt )} \\
\quad {\tt (array} type-qualifier-list {\tt static} assignment-expression direct-declarator {\tt )} \\
\quad {\tt (array} {\tt ref} type-qualifier-list$_{opt}$ direct-declarator {\tt )} \\
\quad {\tt (} direct-declarator {\tt (}parameter-type-list{\tt )} {\tt )} \\
\quad {\tt (} direct-declarator {\tt (}identifier-list{\tt )} {\tt )} \\

\noindent
parameter-type-list: \\
\quad parameter-list \\
\quad parameter-list {\tt ...} \\

\noindent
parameter-list: \\
\quad parameter-declaration \\
\quad parameter-list parameter-declaration \\

\noindent
parameter-declaration: \\
\quad {\tt (}declaration-specifiers{\tt )} declarator \\
\quad {\tt (}declaration-specifiers{\tt )} abstract-declarator$_{opt}$ \\

\noindent
identifier-list: \\
\quad identifier \\
\quad identifier-list identifier \\

\noindent
type-name: \\
\quad specifier-qualifier-list abstract-declarator$_{opt}$ \\

\noindent
abstract-declarator: \\
\quad direct-abstract-declarator \\
\quad {\tt (ref} type-qualifier-list$_{opt}$ abstract-declarator {\tt )} \\

\noindent
direct-abstract-declarator: \\
\quad {\tt (} abstract-declarator {\tt )} \\
\quad {\tt (array} assignment-expression$_{opt}$ direct-abstract-declarator$_{opt}$ {\tt )} \\
\quad {\tt (array} {\tt ref} direct-abstract-declarator$_{opt}$ {\tt )} \\
\quad {\tt (} direct-abstract-declarator$_{opt}$ {\tt (}parameter-type-list{\tt )} {\tt )} \\

\noindent
typedef-name: \\
\quad identifier \\

\noindent
initializer: \\
\quad assignment-expression \\
\quad {\tt (} initializer-list {\tt )} \\ 
\quad {\tt (} initializer-list {\tt ,} {\tt )} \\

%!!!
\noindent
initializer-list: \\
\quad initializer \\
\quad initlalizer-list initializer \\

%------------------------------------------------------------------------------
\rm
\section{Statements}

\it
\noindent
statement: \\
\quad labeled-statement \\
\quad compound-statement \\
\quad expression-statement \\
\quad selection-statement \\
\quad iteration-statement \\
\quad jump-statement \\

\noindent
labeled-statement: \\
\quad {\tt (label} identifier statement {\tt )} \\
\quad {\tt (case} constant-expression statement {\tt )} \\
\quad {\tt (default} statement {\tt )} \\

\noindent
compound-statement: \\
\quad {\tt (} block-item-list$_{opt}$ {\tt )} \\

\noindent
block-item-list: \\
\quad block-item \\
\quad block-item-list block-item \\

\noindent
block-item: \\
\quad declaration \\
\quad statement \\

\noindent
expression-statemt: \\
\quad expression$_{opt}$ \\

\noindent
selection-statement: \\
\quad {\tt (if} expression statement statement$_{opt}$ {\tt )} \\
\quad {\tt (switch} expression statement {\tt )} \\

\noindent
iteration-statement: \\
\quad {\tt (while} expression statement {\tt )} \\
\quad {\tt (do} statent {\tt while} expression {\tt )} \\
\quad {\tt (for} {\tt (}expression$_{opt}${\tt )} {\tt (}expression$_{opt}${\tt )} {\tt (}expression$_{opt}${\tt )} statement {\tt )} \\
\quad {\tt (for} {\tt (}declaration expression$_{opt}${\tt )} {\tt (}expression$_{opt}${\tt )} statement {\tt )} \\

\noindent
jump-statement: \\
\quad {\tt (goto} identifier {\tt )} \\
\quad {\tt continue} \\
\quad {\tt break} \\
\quad {\tt (return} expression$_{opt}$ {\tt )}

%------------------------------------------------------------------------------
\rm
\section{Expressions}
\it

\noindent
primary-expression: \\
\quad identifier \\
\quad constant \\
\quad string-literal \\
\quad {\tt (} expression {\tt )} \\

\noindent
postfix-expression: \\
\quad primary-expression \\
\quad {\tt (} postfix-expression {\tt aref} expression-list {\tt )} \\
\quad {\tt (} postfix-expression argument-expression-list$_{opt}$ {\tt )} \\
\quad {\tt (} postfix-expression {\tt .} expression {\tt )} \\
\quad {\tt (} postfix-expression {\tt ->} expression {\tt )} \\
\quad {\tt (} postfix-expression {\tt ++} {\tt )} \\
\quad {\tt (} postfix-expression {\tt --} {\tt )} \\
\quad {\tt (} {\tt (}type-name{\tt )} {\tt (}initializer-list{\tt )} {\tt )} \\
\quad {\tt (} {\tt (}type-name{\tt )} {\tt (}initializer-list {\tt ,} {\tt )} {\tt )} \\

\noindent
argument-expression-list: \\
\quad assignment-expression
\quad {\tt (} argument-expression-list assignment-expression {\tt )} \\

\noindent
expression-list: \\
\quad expression
\quad {\tt (} expression-list expression {\tt )} \\

\noindent 
unary-expression: \\
\quad postfix-expression \\
\quad {\tt (++} unary-experssion {\tt )} \\
\quad {\tt (--} unary-expression {\tt )} \\
\quad {\tt (} unary-operator cast-expression {\tt )} \\
\quad {\tt (sizeof} unary-expression {\tt )} \\
\quad {\tt (sizeof} type-name {\tt )} \\

\noindent
unary-operator: \\ \tt
\quad defef \\
\quad ref \\
\quad + \\
\quad - \\
\quad \~ \\
\quad ! \\ \\it

\noindent
cast-expression: \\
\quad unary-expression \\
\quad {\tt (} {\tt (}type-name{\tt )} cast-expression {\tt )} \\

\noindent
assignment-expression: \\
\quad cast-expression \\
\quad {\tt (*} assignmemnt-expression-list {\tt )} \\
\quad {\tt (/} assignmemnt-expression-list {\tt )} \\
\quad {\tt (\%} assignmemnt-expression-list {\tt )} \\
\quad {\tt (+} assignmemnt-expression-list {\tt )} \\
\quad {\tt (-} assignmemnt-expression-list {\tt )} \\
\quad {\tt (<<} assignmemnt-expression-list {\tt )} \\
\quad {\tt (>>} assignmemnt-expression-list {\tt )} \\
\quad {\tt (<} assignmemnt-expression-list {\tt )} \\
\quad {\tt (>} assignmemnt-expression-list {\tt )} \\
\quad {\tt (<=} assignmemnt-expression-list {\tt )} \\
\quad {\tt (>=} assignmemnt-expression-list {\tt )} \\
\quad {\tt (==} assignmemnt-expression-list {\tt )} \\
\quad {\tt (!=} assignmemnt-expression-list {\tt )} \\
\quad {\tt (\&} assignmemnt-expression-list {\tt )} \\
\quad {\tt (\^} assignmemnt-expression-list {\tt )} \\
\quad {\tt (|} assignmemnt-expression-list {\tt )} \\
\quad {\tt (\&\&} assignmemnt-expression-list {\tt )} \\
\quad {\tt (||} assignmemnt-expression-list {\tt )} \\
\quad {\tt (?:} assignmemnt-expression assignment-expression assignment-expression {\tt )} \\
\quad {\tt (} assignment-operator assignmemnt-expression-list {\tt )} \\

\noindent
assignment-operator: \\ \tt
\quad = \\
\quad *= \\
\quad /= \\
\quad \%= \\
\quad += \\
\quad -= \\
\quad <<= \\
\quad >>= \\
\quad \&= \\
\quad \^= \\
\quad |= \\ \it

\noindent
expression: \\
\quad assignment-expression \\
\quad {\tt (prog} assignment-expression-list {\tt )} \\

\noindent
assignment-expression-list: \\
\quad assignment-expression \\
\quad assignment-expression-list assignment-expression \\

\noindent
constant-expression: \\
\quad cast-expression \\
\quad {\tt (*} constant-expression-list {\tt )} \\
\quad {\tt (/} constant-expression-list {\tt )} \\
\quad {\tt (\%} constant-expression-list {\tt )} \\
\quad {\tt (+} constant-expression-list {\tt )} \\
\quad {\tt (-} constant-expression-list {\tt )} \\
\quad {\tt (<<} constant-expression-list {\tt )} \\
\quad {\tt (>>} constant-expression-list {\tt )} \\
\quad {\tt (<} constant-expression-list {\tt )} \\
\quad {\tt (>} constant-expression-list {\tt )} \\
\quad {\tt (<=} constant-expression-list {\tt )} \\
\quad {\tt (>=} constant-expression-list {\tt )} \\
\quad {\tt (==} constant-expression-list {\tt )} \\
\quad {\tt (!=} constant-expression-list {\tt )} \\
\quad {\tt (\&} constant-expression-list {\tt )} \\
\quad {\tt (\^} constant-expression-list {\tt )} \\
\quad {\tt (|} constant-expression-list {\tt )} \\
\quad {\tt (\&\&} constant-expression-list {\tt )} \\
\quad {\tt (||} constant-expression-list {\tt )} \\
\quad {\tt (?:} constant-expression constant-expression constant-expression {\tt )} \\

\noindent
constant-expression-list: \\
\quad constant-expression \\
\quad constant-expression-list constant-expression \\

\end{document}
