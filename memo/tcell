* initially, finally
* fibの場合，分けたスレッドの結果置き場
Cilk: SYNCED -> Cilk継続を取る．我々のは途中だけとる．
* 1[処理内容],2[取られたとき],3[取られた場合],4[取られなかった場合]

==============================
全ノードで同じ仕事を知っているが
別の部分を担当する方式も，
→ 一部落ちたときに "マージ処理部分" が冗長化されている

==============================
stealがおきたとき          に何をするかを書ける．
仕事の結果をもらったときに

LTCだといつとられるかわからなくて，特殊なことが必要なら
前もってやっとく必要がある．

逐次で動くものを用意しておいて，後から追加できる．
遡れるので副作用があっても大丈夫．

==============================
・配列の授受の実装
* 固定長→配列を作っておいて，ローカル渡し=構造体の代入，
* 可変長→長さを表す整数変数+ポインタ，ローカル渡し->memcpy
local-copierのオーバーライドが必要か？
