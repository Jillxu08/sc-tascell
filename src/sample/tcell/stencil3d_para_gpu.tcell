(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL)
(%include "rule/tcell-setrule.sh")

(c-exp "#include<stdio.h>")
(c-exp "#include<stdlib.h>")
(c-exp "#include<time.h>")
(c-exp "#include<math.h>")
(c-exp "#include<sys/time.h>")
(c-exp "#include \"stencil3d_acc.h\"")

(%include "clib.sh")

(%defconstant delT (/ 1 27.0))

;; (defs (array double N N) d)
(static c (ptr (array double (+ N 2) (+ N 2))))
(static d (ptr (array double (+ N 2) (+ N 2))))
;; (def  int)

(decl (csym::elapsed-time tp) (fn double (array (struct timeval) 2)))
(decl (block_para param n i1 i2) (wfn void (ptr (array int 3)) int int int))
(decl (stencil_recursive x y z n)(wfn void int int int int))
(decl (csym::stencil_seq)(fn void))
(decl (csym::printpointer s)(fn void (ptr (array double (+ N 2) (+ N 2)))))
(decl (stencil x y z n) (wfn void int int int int))
(decl (csym::sgpu x y z n id)(fn void int int int int int))

(def (csym::elapsed-time tp) 
  (fn double (array (struct timeval) 2))
  (return (+ (- (fref (aref tp 1) tv-sec)
                (fref (aref tp 0) tv-sec))
             (* 0.000001
                (- (fref (aref tp 1) tv-usec)
                   (fref (aref tp 0) tv-usec))))))
                   
(def (task stencil-start))

(def (task blockTask)
    (def param (ptr (array int 3)))
    (def n int)
    (def i1 int)
    (def i2 int))

(def (task-body blockTask)
    (block_para this.param this.n this.i1 this.i2))

(def (task-body stencil-start)
  (decl tp (array (struct timeval) 2))
  (decl tp1 (array (struct timeval) 2))

  (csym::fprintf stderr "N=%d, It=%d, th_gpu=%d, BLOCK_SIZE=%d ~%" N It th_gpu BLOCK_SIZE)
  ;; (csym::fprintf stderr "start stencil~%")

  ;; (csym::fprintf stderr "000:th_cpu=%d N=%d N=%d~%" th_cpu N N)
  (= a (cast (ptr (array double (+ N 2) (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (+ N 2) (sizeof double)))))
  (= b (cast (ptr (array double (+ N 2) (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (+ N 2) (sizeof double)))))
  (def i int)
  (def j int)
  (def k int)
  (def x int 1)
  (def y int 1)
  (def z int 1)

  ;; (csym::fprintf stderr "00:th_cpu=%d N=%d N=%d~%" th_cpu N N)
  ;; (csym::fprintf stderr "start initialization~%")
  (for ((= j 0) (< j (+ N 2)) (inc j))
    (for ((= i 0) (< i (+ N 2)) (inc i))
      (for ((= k 0) (< k (+ N 2)) (inc k))
        (= (aref a j i k) 0)
        (= (aref b j i k) 0))))

  (= (aref a 0 0 0) 1)
  (= (aref b 0 0 0) 1)

  ;; (csym::fprintf stderr "stencil_para start iteration~%")
  (csym::fprintf stderr "------------------- time -----------------~%")
  (csym::gettimeofday tp 0)
  (stencil x y z N)
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "time_gpu: %5.4f~%"  (csym::elapsed-time tp))
  
  ;; (csym::fprintf stderr "stencil_seq start iteration~%")
  (csym::gettimeofday tp1 0)
  (csym::stencil_seq)
  (csym::gettimeofday (+ tp1 1) 0)
  (csym::fprintf stderr "time_cpu_check: %5.4f~%"  (csym::elapsed-time tp1))
  (csym::fprintf stderr "-----------------------------------------~%~%")
    
  (csym::fprintf stderr "------------------- a and c -----------------~%~%")
  (csym::printpointer a)
  (csym::printpointer c)
  (csym::fprintf stderr "------------------- b and d -----------------~%~%")
  (csym::printpointer b)
  (csym::printpointer d)

  (def flag int 0)
    (for ((= i 0) (< i (+ N 2)) (inc i))
      (for ((= j 0) (< j (+ N 2)) (inc j))
        (for ((= k 0) (< k (+ N 2)) (inc k))      
          (if (or (> (csym::fabs(- (aref a i j k) (aref c i j k))) 1.0E-6) (> (csym::fabs(- (aref b i j k) (aref d i j k))) 1.0E-6))
              (begin
                  (csym::fprintf stderr "THE ANSWER IS WRONG!~%")
                  (= flag 1)
                  (break))))
        (if (== flag 1) (break)))
      (if (== flag 1) (break)))
    (if (== flag 0)
        (csym::fprintf stderr "THE ANSWER IS RIGHT!~%"))

  ;; (csym::fprintf stderr "------------------- a and c -----------------~%~%")
  ;; (csym::printpointer a)
  ;; (csym::printpointer c)
  ;; (csym::fprintf stderr "------------------- b and d -----------------~%~%")
  ;; (csym::printpointer b)
  ;; (csym::printpointer d)
    
  ;; (def fp (ptr FILE))
  ;; (= fp (fopen "u2.data" "w"))
  ;; (for ((= j 0) (< j N) (inc j))
  ;;   (for ((= i 0) (< i N) (inc i))
  ;;     (csym::fprintf fp " %.15E %.15E %.15E~%" (/ (cast double i) N) (/ (cast double j) N) (aref a j i))
  ;;   )
  ;;   (csym::fprintf fp "~%")
  ;; )
  ;; (fclose fp)
)

(def (stencil x y z n) (wfn void int int int int)
  (def k int)
  (defs int blockEnd currentTime)
  (def t (ptr (array double (+ N 2) (+ N 2))))

  (for ((= k 0) (< k It) (inc k))
    (stencil_recursive x y z n)
    (= t a)
    (= a b)
    (= b t))

  ;; temporal blcoking
  ;; (csym::fprintf stderr "with temporal blcoking~%~%")
  ;; (for ((= k 0) (< k It) (+= k BLOCK_SIZE))
  ;;   (if (< (+ k BLOCK_SIZE) It)
  ;;     (begin (= blockEnd (+ k BLOCK_SIZE)))
  ;;     (begin (= blockEnd It)))
  ;;   (for ((= currentTime k) (< currentTime blockEnd) (inc currentTime))
  ;;     (stencil_recursive x y n)
  ;;     (= t a)
  ;;     (= a b)
  ;;     (= b t)))
)

(def (stencil_recursive x y z n)(wfn void int int int int)
  ;; (defs int i j k)
    (if (<= n th_gpu) 
      (begin 
        (csym::sgpu x y z n WORKER-ID)        
      )    
        (begin 
          (defs int x0 x1 x2 x3 x4 x5 x6 x7 y0 y1 y2 y3 y4 y5 y6 y7 z0 z1 z2 z3 z4 z5 z6 z7)
          (= x0 x)
          (= y0 y)
          (= z0 z)

          (= x1 x)
          (= y1 y) 
          (= z1 (+ z (/ n 2)))

          (= x2 x)
          (= y2 (+ y (/ n 2)))
          (= z2 z)

          (= x3 (+ x (/ n 2)))
          (= y3 y)
          (= z3 z)

          (= x4 x)
          (= y4 (+ y (/ n 2))) 
          (= z4 (+ z (/ n 2)))

          (= x5 (+ x (/ n 2)))
          (= y5 y) 
          (= z5 (+ z (/ n 2)))

          (= x6 (+ x (/ n 2)))
          (= y6 (+ y (/ n 2))) 
          (= z6 z)

          (= x7 (+ x (/ n 2)))
          (= y7 (+ y (/ n 2)))
          (= z7 (+ z (/ n 2)))
          
          (def param (array int 8 3))
          ;; (= param (cast (ptr (array int 2)) (csym::malloc (* (sizeof (array int 2)) 4))))
          ;; (csym::fprintf stderr "no error4~%")

          (= (aref param 0 0) x0)
          (= (aref param 0 1) y0)
          (= (aref param 0 2) z0)

          (= (aref param 1 0) x1)
          (= (aref param 1 1) y1)
          (= (aref param 1 2) z1)

          (= (aref param 2 0) x2)
          (= (aref param 2 1) y2)
          (= (aref param 2 2) z2)

          (= (aref param 3 0) x3)
          (= (aref param 3 1) y3)
          (= (aref param 3 2) z3)

          (= (aref param 4 0) x4)
          (= (aref param 4 1) y4)
          (= (aref param 4 2) z4)

          (= (aref param 5 0) x5)
          (= (aref param 5 1) y5)
          (= (aref param 5 2) z5)

          (= (aref param 6 0) x6)
          (= (aref param 6 1) y6)
          (= (aref param 6 2) z6)

          (= (aref param 7 0) x7)
          (= (aref param 7 1) y7)
          (= (aref param 7 2) z7)

          (block_para param (/ n 2) 0 8)
        ) 
      )
  )
    
(def (block_para param n i1 i2) (wfn void (ptr (array int 3)) int int int)
  (def i int)
  ;; (csym::fprintf stderr "i1 = %d i2 = %d ~%" i1 i2) 
  (do-many for i from i1 to i2
    (stencil_recursive (aref param i 0) (aref param i 1) (aref param i 2) n)
    (handles blockTask
      (:put from j1 to j2
        (= this.param param)
        (= this.n n)
        (= this.i1 j1)
        (= this.i2 j2))
    (:get))))

(def (csym::printpointer s)(fn void (ptr (array double (+ N 2) (+ N 2))))
  (defs int i j k)
  (csym::fprintf stderr "====================================~%")
  (for ((= j 0) (< j (+ N 1)) (inc j))
    (for ((= i 0) (< i (+ N 1)) (inc i))
      (for ((= k 0) (< k (+ N 1)) (inc k))
      ;; (= (aref s j i) 0)))
        (csym::fprintf stderr "%5.4f " (aref s j i k))))
    (csym::fprintf stderr "~%"))
    (csym::fprintf stderr "====================================~%"))

(def (csym::stencil_seq)(fn void)
  (defs int k j i p)
  (= c (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
  (= d (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
  ;; (csym::fprintf stderr "start initialization~%")
  (for ((= j 0) (< j (+ N 2)) (inc j))
    (for ((= i 0) (< i (+ N 2)) (inc i))
      (for ((= k 0) (< k (+ N 2)) (inc k))
      (= (aref c j i k) 0)
      (= (aref d j i k) 0))))
  ;; ;; col 0.5
  ;; (for ((= j 1) (< j (+ N 2)) (inc j))
  ;;   (= (aref c j 0) 0.5)
  ;;   (= (aref d j 0) 0.5))
  ;; ;; row 1
  ;; (for ((= i 1) (< i (+ N 2)) (inc i))
  ;;   (= (aref c 0 i) 1)
  ;;   (= (aref d 0 i) 1))
  (= (aref c 0 0 0) 1)
  (= (aref d 0 0 0) 1)

  (for ((= k 0) (< k It) (inc k))
    (for ((= j 1) (< j (+ N 1)) (inc j))
      (for ((= i 1) (< i (+ N 1)) (inc i))
        (for ((= p 1) (< p (+ N 1)) (inc p))
          (= (aref d j i p) 
            (* delT 
              (+
                (aref c j i p)
                (+ (aref c (- j 1) (- i 1) (- p 1)) (aref c (- j 1) (- i 1) p) (aref c (- j 1) i (- p 1)) (aref c j (- i 1) (- p 1)) (aref c (- j 1) i p) (aref c j i (- p 1)) (aref c j (- i 1) p))
                (+ (aref c (+ j 1) (+ i 1) (+ p 1)) (aref c (+ j 1) (+ i 1) p) (aref c (+ j 1) i (+ p 1)) (aref c j (+ i 1) (+ p 1)) (aref c (+ j 1) i p) (aref c j i (+ p 1)) (aref c j (+ i 1) p))
                (+ (aref c (+ j 1) (- i 1) (- p 1)) (aref c (- j 1) (+ i 1) (- p 1)) (aref c (- j 1) (- i 1) (+ p 1)) (aref c (- j 1) (+ i 1) (+ p 1)) (aref c (+ j 1) (- i 1) (+ p 1)) (aref c (+ j 1) (+ i 1) (- p 1)))
                (+ (aref c (+ j 1) i (- p 1)) (aref c (- j 1) i (+ p 1)) (aref c j (- i 1) (+ p 1)) (aref c j (+ i 1) (- p 1)) (aref c (+ j 1) (- i 1) p) (aref c (- j 1) (+ i 1) p))
              )                  
            )
          )     
        )
      )
    )
    (def t (ptr (array double (+ N 2) (+ N 2))))
    (= t c)
    (= c d)
    (= d t)
  )
)