;; Block matrix mul with add and mul operations parallelization

(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL)
(%include "rule/tcell-setrule.sh")

(c-exp "#include <stdio.h>")
(c-exp "#include <stdlib.h>")
(c-exp "#include <math.h>")
(c-exp "#include <time.h>")

(%defconstant MATRIX_SIZE 2048)
;; (%defconstant th 0)
(%defconstant th1 8)

(decl (BlockMul_parallel param n i1 i2) (wfn void (ptr (array (ptr double) 3)) int int int))
(decl (BlockMul X Y Z m) (wfn void (ptr double) (ptr double) (ptr double) int))
(decl (matAdd_parallel A B C i1 i2) (wfn void (ptr double) (ptr double) (ptr double) int int))

(decl (csym::matMul A B C n) (fn void (ptr double) (ptr double) (ptr double) int))
(decl (csym::matAdd A B C m) (fn void (ptr double) (ptr double) (ptr double) int))
(decl (csym::get-wall-time) (fn double void))

(def (enum array) x11 x12 x21 x22 y11 y12 y21 y22
       P1 P2 P3 P4 P5 P6 P7 P8 C11 C12 C21 C22 arrs)

(def (task mm-start))
(def (task BlockTask)
    (def param (ptr (array (ptr double) 3)))
    (def n int)
    (def i1 int)
    (def i2 int))
(def (task matAddTask)
    (def A (ptr double))
    (def B (ptr double))
    (def C (ptr double))
    (def i1 int)
    (def i2 int))

(def (task-body mm-start)
    (defs int N i j)
    (defs double start end)
    (defs double start2 end2)
    (def elapsed double)
    (def elapsed2 double)
    (defs (ptr double) X Y Z W A B C)
    
     (csym::fprintf stderr "mm4_parallel1_th's result is as follows:   ~%")
    (csym::fprintf stderr "---------------------------worker = ----------------------------------------------~%")

        (= N MATRIX_SIZE)
        (csym::fprintf stderr "Matrix size = %2d    " N) 
        (= X (csym::malloc (* (sizeof double) (* N N))))
        (= Y (csym::malloc (* (sizeof double) (* N N))))
        (= Z (csym::malloc (* (sizeof double) (* N N))))
        (= W (csym::malloc (* (sizeof double) (* N N))))
        (if (or (== X NULL) (or (== Y NULL) (or (== Z NULL) (== W NULL))))
            (begin 
                (csym::fprintf stderr "Out of memory (1)~%")
                (csym::exit 1))) 

        (csym::srand 0)    
        (for ((= i 0) (< i (* N N)) (inc i))
            (= (aref X i) (/ (csym::rand) (+ RAND_MAX 1.0)))
            (= (aref Y i) (/ (csym::rand) (+ RAND_MAX 1.0))))

        (= start (csym::get-wall-time))
        (csym::matMul X Y W N)
        (= end (csym::get-wall-time))
        (= elapsed (- end start))
        (csym::fprintf stderr "naive = %5.4f    " elapsed)

        (= start2 (csym::get-wall-time))
        (BlockMul X Y Z N)
        (= end2 (csym::get-wall-time))
        (= elapsed2 (- end2 start2))
        (csym::fprintf stderr "BlockMul = %5.4f  ~%" elapsed2) 

        (def flag int 0)
        (for ((= i 0) (< i N) (inc i))
            (for ((= j 0) (< j N) (inc j))      
                (if (> (csym::fabs(- (aref Z (+ (* i N) j)) (aref W (+ (* i N) j)))) 0.000001)
                    (begin
                        (csym::fprintf stderr "THE ANSWER IS WRONG!~%")
                        (= flag 1)
                        (break))))
            (if (== flag 1) (break)))
        (if (== flag 0)
            (csym::fprintf stderr "THE ANSWER IS RIGHT!~%"))

        ;; (csym::fprintf stderr "------------------- Input Matrices X and Y ---------------------------~%~%")
        ;; (for ((= i 0) (< i N) (inc i))
        ;;     (for ((= j 0) (< j N) (inc j))
        ;;         (csym::fprintf stderr "%5.4f  " (aref X (+ (* i N) j))))
        ;;     (csym::fprintf stderr "~%"))
        ;; (csym::fprintf stderr "~%")  

        ;; (for ((= i 0) (< i N) (inc i))
        ;;     (for ((= j 0) (< j N) (inc j))
        ;;         (csym::fprintf stderr "%5.4f  " (aref Y (+ (* i N) j))))
        ;;     (csym::fprintf stderr "~%"))
        ;; (csym::fprintf stderr "~%")  

        ;; (csym::fprintf stderr "------------------- Output Matrices Z and W ---------------------------~%~%")
        ;; (for ((= i 0) (< i N) (inc i))
        ;;     (for ((= j 0) (< j N) (inc j))      
        ;;         (csym::fprintf stderr "%5.4f  " (aref Z (+ (* i N) j))))
        ;;     (csym::fprintf stderr "~%"))
        ;; (csym::fprintf stderr "~%")      
        
        ;; (for ((= i 0) (< i N) (inc i))
        ;;     (for ((= j 0) (< j N) (inc j))      
        ;;         (csym::fprintf stderr "%5.4f  " (aref W (+ (* i N) j))))
        ;;     (csym::fprintf stderr "~%"))
        ;; (csym::fprintf stderr "~%")  

        (csym::free W)
        (csym::free Z)
        (csym::free Y)
        (csym::free X)
    (csym::fprintf stderr "-------------------------------------------------------------------------~%~%~%")) 

(def (task-body BlockTask)
   (BlockMul_parallel this.param this.n this.i1 this.i2))

(def (task-body matAddTask)
    (matAdd_parallel this.A this.B this.C this.i1 this.i2))

(def (BlockMul X Y Z m)(wfn void (ptr double) (ptr double) (ptr double) int)
    (def row int 0)
    (def col int 0)
    (def n int (/ m 2))
    (def i int 0)
    (def j int 0)
    (def arr (array (ptr double) arrs))

    (if (== m 1)
    (begin
        (= (mref Z) (* (mref X) (mref Y)))
        (return)))  

    (for ((= i 0) (< i arrs) (inc i))
    (= (aref arr i) (cast (ptr double) (csym::malloc (* (sizeof double) (* n n)))))
    (if (== (aref arr i) NULL)
        (begin
            (csym::fprintf stderr "Out of memory (1) ~%")  
            (csym::exit 1))))
    
    (for ((exps (= row 0) (= i 0)) (< row n) (exps (inc row) (inc i)))
        (for ((exps (= col 0) (= j 0)) (< col n) (exps (inc col) (inc j)))
            (= (aref arr x11 (+ (* i n) j)) (aref X (+ (* row m) col)))
            (= (aref arr y11 (+ (* i n) j)) (aref Y (+ (* row m) col))))
        (for ((exps (= col n) (= j 0)) (< col m) (exps (inc col) (inc j)))
            (= (aref arr x12 (+ (* i n) j)) (aref X (+ (* row m) col)))
            (= (aref arr y12 (+ (* i n) j)) (aref Y (+ (* row m) col)))))

    (for ((exps (= row n) (= i 0)) (< row m) (exps (inc row) (inc i)))
        (for ((exps (= col 0) (= j 0)) (< col n) (exps (inc col) (inc j)))
            (= (aref arr x21 (+ (* i n) j)) (aref X (+ (* row m) col)))
            (= (aref arr y21 (+ (* i n) j)) (aref Y (+ (* row m) col))))
        (for ((exps (= col n) (= j 0)) (< col m) (exps (inc col) (inc j)))
            (= (aref arr x22 (+ (* i n) j)) (aref X (+ (* row m) col)))
            (= (aref arr y22 (+ (* i n) j)) (aref Y (+ (* row m) col)))))

    ;; (csym::matMul (aref arr x11) (aref arr y11) (aref arr P1) n)
    ;; (csym::matMul (aref arr x12) (aref arr y21) (aref arr P2) n)
    ;; (csym::matMul (aref arr x11) (aref arr y12) (aref arr P3) n)
    ;; (csym::matMul (aref arr x12) (aref arr y22) (aref arr P4) n)
    ;; (csym::matMul (aref arr x21) (aref arr y11) (aref arr P5) n)
    ;; (csym::matMul (aref arr x22) (aref arr y21) (aref arr P6) n)
    ;; (csym::matMul (aref arr x21) (aref arr y12) (aref arr P7) n)
    ;; (csym::matMul (aref arr x22) (aref arr y22) (aref arr P8) n)
    (def param (ptr (array (ptr double) 3) ))
    (= param (cast (ptr (array (ptr double) 3) ) (csym::malloc (* (sizeof (array (ptr double) 3)) 8))) )
    (= (aref param 0 0) (aref arr x11))
    (= (aref param 0 1) (aref arr y11))
    (= (aref param 0 2) (aref arr P1))
    (= (aref param 1 0) (aref arr x12))
    (= (aref param 1 1) (aref arr y21))
    (= (aref param 1 2) (aref arr P2))
    (= (aref param 2 0) (aref arr x11))
    (= (aref param 2 1) (aref arr y12))
    (= (aref param 2 2) (aref arr P3))
    (= (aref param 3 0) (aref arr x12))
    (= (aref param 3 1) (aref arr y22))
    (= (aref param 3 2) (aref arr P4))
    (= (aref param 4 0) (aref arr x21))
    (= (aref param 4 1) (aref arr y11))
    (= (aref param 4 2) (aref arr P5))
    (= (aref param 5 0) (aref arr x22))
    (= (aref param 5 1) (aref arr y21))
    (= (aref param 5 2) (aref arr P6))
    (= (aref param 6 0) (aref arr x21))
    (= (aref param 6 1) (aref arr y12))
    (= (aref param 6 2) (aref arr P7))
    (= (aref param 7 0) (aref arr x22))
    (= (aref param 7 1) (aref arr y22))
    (= (aref param 7 2) (aref arr P8))

    ;; (for ((= i 0) (< i 8) (inc i))
    ;;     (strassenMul (aref param i 0) (aref param i 1) (aref param i 2) n))
    (BlockMul_parallel param n 0 8)
    
    ;; (if (< m th)
    ;;     (begin
    ;;         (csym::matAdd (aref arr P1) (aref arr P2) (aref arr C11) n)
    ;;         (csym::matAdd (aref arr P3) (aref arr P4) (aref arr C12) n)
    ;;         (csym::matAdd (aref arr P5) (aref arr P6) (aref arr C21) n)
    ;;         (csym::matAdd (aref arr P7) (aref arr P8) (aref arr C22) n))
    ;;     (begin
    ;;         (matAdd_parallel (aref arr P1) (aref arr P2) (aref arr C11) 0 (* n n))
    ;;         (matAdd_parallel (aref arr P3) (aref arr P4) (aref arr C12) 0 (* n n))
    ;;         (matAdd_parallel (aref arr P5) (aref arr P6) (aref arr C21) 0 (* n n))
    ;;         (matAdd_parallel (aref arr P7) (aref arr P8) (aref arr C22) 0 (* n n))))

    (matAdd_parallel (aref arr P1) (aref arr P2) (aref arr C11) 0 (* n n))
    (matAdd_parallel (aref arr P3) (aref arr P4) (aref arr C12) 0 (* n n))
    (matAdd_parallel (aref arr P5) (aref arr P6) (aref arr C21) 0 (* n n))
    (matAdd_parallel (aref arr P7) (aref arr P8) (aref arr C22) 0 (* n n))

    (for ((exps (= row 0) (= i 0)) (< row n) (exps (inc row) (inc i)))
        (for ((exps (= col 0) (= j 0)) (< col n) (exps (inc col) (inc j)))
            (= (aref Z (+ (* row m) col)) (aref arr C11 (+ (* i n) j))))
        (for ((exps (= col n) (= j 0)) (< col m) (exps (inc col) (inc j)))
            (= (aref Z (+ (* row m) col)) (aref arr C12 (+ (* i n) j)))))

    (for ((exps (= row n) (= i 0)) (< row m) (exps (inc row) (inc i)))
        (for ((exps (= col 0) (= j 0)) (< col n) (exps (inc col) (inc j)))
            (= (aref Z (+ (* row m) col)) (aref arr C21 (+ (* i n) j))))
        (for ((exps (= col n) (= j 0)) (< col m) (exps (inc col) (inc j)))
            (= (aref Z (+ (* row m) col)) (aref arr C22 (+ (* i n) j)))))   
    
    (for ((= i 0) (< i arrs) (inc i))
        (csym::free (aref arr i))))

(def (BlockMul_parallel param n i1 i2) (wfn void (ptr (array (ptr double) 3)) int int int)
    (def i int)
    (do-many for i from i1 to i2
        (BlockMul (aref param i 0) (aref param i 1) (aref param i 2) n)
        (handles BlockTask
            (:put from i1 to i2
                (= this.param param)
                (= this.n n)
                (= this.i1 i1)
                (= this.i2 i2))
            (:get))))

(def (csym::matMul A B C n)(fn void (ptr double) (ptr double) (ptr double) int)
    (def row int 0)
    (def col int 0)
    (def k int 0)
    (def i int 0)
    (def j int 0)
    (def sum double)
    (for ((= i 0) (< i n) (inc i))
        (for ((= j 0) (< j n) (inc j))
            (= sum 0.0)
            (for ((= k 0) (< k n) (inc k))
                (+= sum (* (aref A (+ (* i n) k)) (aref B (+ (* k n) j)))))
            (= (aref C (+ (* i n) j)) sum))))            

(decl (matAdd_parallel A B C i1 i2) (wfn void (ptr double) (ptr double) (ptr double) int int)
    (def i int 0)
    (if (< th1 (- i1 i2))
        (begin
            (do-many for i from i1 to i2
                (= (aref C i) (+ (aref A i) (aref B i) ))
                (handles matAddTask
                    (:put from i1 to i2
                        (= this.A A)
                        (= this.B B)
                        (= this.C C)
                        (= this.i1 i1)
                        (= this.i2 i2))
                    (:get))))
        (begin
            (for ((= i i1) (< i i2) (inc i))
                (= (aref C i) (+ (aref A i) (aref B i)))))))

(def (csym::matAdd A B C m) (fn void (ptr double) (ptr double) (ptr double) int)
    (def row int 0)
    (def col int 0)
    (for ((= row 0) (< row m) (inc row))
        (for ((= col 0) (< col m) (inc col))
            (= (aref C (+ (* row m) col)) (+ (aref A (+ (* row m) col)) (aref B (+ (* row m) col)))))))

(def (csym::get-wall-time) (fn double void)
    (decl time (struct timeval))
    (if (csym::gettimeofday (ptr time) NULL) (begin (return 0)))
    (return (+ (cast double (fref time tv-sec)) (* (cast double (fref time tv-usec)) 0.000001))))