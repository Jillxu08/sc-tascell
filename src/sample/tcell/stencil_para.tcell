(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL)
(%include "rule/tcell-setrule.sh")

(c-exp "#include<stdio.h>")
(c-exp "#include<stdlib.h>")
(c-exp "#include<time.h>")
;; (c-exp "#include<math.h>")
(c-exp "#include<sys/time.h>")

(%include "clib.sh")

(%defconstant N 2048)
;; (%defconstant N 1024)
(%defconstant It 4000)

(def th_cpu int 2)
(def delT double (/ 0.1 (* N N)))
(static a (ptr (array double (+ N 1))))
(static b (ptr (array double (+ N 1))))
(static c (ptr (array double (+ N 1))))
(static d (ptr (array double (+ N 1))))

(decl (csym::elapsed-time tp) (fn double (array (struct timeval) 2)))
(decl (csym::ex_pointer p q) (fn void (ptr (array double (+ N 1))) (ptr (array double (+ N 1)))))
(decl (block_para param n i1 i2) (wfn void (ptr (array int 2)) int int int))
(decl (stencil_recursive x y n)(wfn void int int int))
(decl (csym::stencil_seq)(fn void))
(decl (csym::printpointer s)(fn void (ptr (array double (+ N 1)))))
(decl (stencil x y n) (wfn void int int int))

(def (csym::elapsed-time tp) 
    (fn double (array (struct timeval) 2))
  (return (+ (- (fref (aref tp 1) tv-sec)
                (fref (aref tp 0) tv-sec))
             (* 0.000001
                (- (fref (aref tp 1) tv-usec)
                   (fref (aref tp 0) tv-usec))))))
                   
(def (task stencil-start))

(def (task blockTask)
    (def param (ptr (array int 2)))
    (def n int)
    (def i1 int)
    (def i2 int))

(def (task-body blockTask)
    (block_para this.param this.n this.i1 this.i2))

(def (task-body stencil-start)
  (decl tp (array (struct timeval) 2))
  (decl tp1 (array (struct timeval) 2))

  (csym::fprintf stderr "N=%d, th_cpu=%d ~%" N th_cpu)
  (csym::fprintf stderr "start stencil~%")

  ;; (csym::fprintf stderr "000:th_cpu=%d N=%d N=%d~%" th_cpu N N)
  (= a (cast (ptr (array double (+ N 1))) (csym::malloc (* (+ N 1) (* (+ N 1) (sizeof double))))))
  (= b (cast (ptr (array double (+ N 1))) (csym::malloc (* (+ N 1) (* (+ N 1) (sizeof double))))))
  (def i int)
  (def j int)
  (def k int)
  (def x int 0)
  (def y int 0)

  ;; (csym::fprintf stderr "00:th_cpu=%d N=%d N=%d~%" th_cpu N N)
  (csym::fprintf stderr "start initialization~%")
  (for ((= j 0) (< j (+ N 1)) (inc j))
    (for ((= i 0) (< i (+ N 1)) (inc i))
      (= (aref a j i) 0)))
  ;; col 0.5
  (for ((= j 1) (< j (+ N 1)) (inc j))
    (= (aref a j 0) 0.5)
    (= (aref b j 0) 0.5))
  ;; row 1
  (for ((= i 1) (< i (+ N 1)) (inc i))
    (= (aref a 0 i) 1)
    (= (aref b 0 i) 1))

  (csym::fprintf stderr "stencil_para start iteration~%")
  (csym::gettimeofday tp 0)
  ;; (stencil_recursive x y N)
  (stencil x y N)
  (csym::gettimeofday (+ tp 1) 0)
  (csym::fprintf stderr "time: %5.4f~%"  (csym::elapsed-time tp))
  
  (csym::fprintf stderr "stencil_seq start iteration~%")
  (csym::gettimeofday tp1 0)
  (csym::stencil_seq)
  (csym::gettimeofday (+ tp1 1) 0)
  (csym::fprintf stderr "time_seq: %5.4f~%"  (csym::elapsed-time tp1))
  
  (def flag int 0)
    (for ((= i 0) (< i N) (inc i))
        (for ((= j 0) (< j N) (inc j))      
            (if (and (> (csym::fabs(- (aref a i j) (aref c i j))) 1.0E-5) (> (csym::fabs(- (aref b i j) (aref d i j))) 1.0E-6))
                (begin
                    (csym::fprintf stderr "THE ANSWER IS WRONG!~%")
                    (= flag 1)
                    (break))))
        (if (== flag 1) (break)))
    (if (== flag 0)
        (csym::fprintf stderr "THE ANSWER IS RIGHT!~%"))

  ;; (csym::fprintf stderr "------------------- a and c -----------------~%~%")
  ;; (csym::printpointer a)
  ;; (csym::printpointer c)
  ;; (csym::fprintf stderr "------------------- b and d -----------------~%~%")
  ;; (csym::printpointer b)
  ;; (csym::printpointer d)
    

  (def fp (ptr FILE))
  (= fp (fopen "u2.data" "w"))
  (for ((= j 0) (< j N) (inc j))
    (for ((= i 0) (< i N) (inc i))
      (csym::fprintf fp " %.15E %.15E %.15E~%" (/ (cast double i) N) (/ (cast double j) N) (aref a j i))
    )
    (csym::fprintf fp "~%")
  )
  (fclose fp)
)

(def (stencil x y n) (wfn void int int int)
  (defs int i j k)
  (for ((= k 0) (< k It) (inc k))
    (stencil_recursive x y n)

    (def t (ptr (array double (+ N 1))))
    (= t (ptr (aref a 0)))
    (= a (ptr (aref b 0)))
    (= b t))
)

(def (stencil_recursive x y n)(wfn void int int int)
   (defs int i j k)
      (if (<= n th_cpu) 
        (begin 
          ;; (for ((= k 0) (< k It) (inc k))
            (for ((= j (+ 1 x)) (and (<= j (+ n x)) (!= j N)) (inc j))
              (for ((= i (+ 1 y)) (and (<= i (+ n y)) (!= i N)) (inc i))
                (= (aref b j i) 
                    (+ (aref a j i) 
                      (* (* delT (* N N)) 
                        (-
                          (+
                            (+ (aref a (+ j 1) i) (aref a (- j 1) i))
                            (+ (aref a j (+ i 1)) (aref a j (- i 1)))
                          )
                          (* 4 (aref a j i))
                        )
                      )
                    )
                )
              )
            )
        )
        (begin 
          (defs int x0 x1 x2 x3 y0 y1 y2 y3)
          (= x0 x)
          (= y0 y)
          (= x1 x )
          (= y1 (+ y (/ n 2)))
          (= x2 (+ x (/ n 2)))
          (= y2 y)
          (= x3 (+ x (/ n 2)))
          (= y3 (+ y (/ n 2)))
          ;; (csym::fprintf stderr "no error4~%")

          (def param (ptr (array int 2)))
          (= param (cast (ptr (array int 2)) (csym::malloc (* (sizeof (array int 2)) 4))))

          (= (aref param 0 0) x0)
          (= (aref param 0 1) y0)
          (= (aref param 1 0) x1)
          (= (aref param 1 1) y1)
          (= (aref param 2 0) x2)
          (= (aref param 2 1) y2)
          (= (aref param 3 0) x3)
          (= (aref param 3 1) y3)

          (block_para param (/ n 2) 0 4)
        ) 
      )
    ;; (def t (ptr (array double (+ N 1))))
    ;; (= t (ptr (aref a 0)))
    ;; (= a (ptr (aref b 0)))
    ;; (= b t))
  )
    
(def (block_para param n i1 i2) (wfn void (ptr (array int 2)) int int int)
  (def i int)
  ;; (csym::fprintf stderr "i1 = %d i2 = %d ~%" i1 i2) 
  (do-many for i from i1 to i2
    (stencil_recursive (aref param i 0) (aref param i 1) n)
    (handles blockTask
      (:put from j1 to j2
        (= this.param param)
        (= this.n n)
        (= this.i1 j1)
        (= this.i2 j2))
    (:get))))

(def (csym::ex_pointer p q)(fn void (ptr (array double (+ N 1))) (ptr (array double (+ N 1))))
    (def t (ptr (array double (+ N 1))))
        (= t (ptr (aref p 0)))
        (= p (ptr (aref q 0)))
        (= q t))

(def (csym::printpointer s)(fn void (ptr (array double (+ N 1))))
    (defs int i j)
    (csym::fprintf stderr "====================================~%")
    (for ((= j 0) (< j N) (inc j))
      (for ((= i 0) (< i N) (inc i))
        ;; (= (aref s j i) 0)))
        (csym::fprintf stderr "%5.4f " (aref s j i)))
      (csym::fprintf stderr "~%"))
      (csym::fprintf stderr "====================================~%"))

(def (csym::stencil_seq)(fn void)
  (defs int k j i)
  (= c (cast (ptr (array double (+ N 1))) (csym::malloc (* (+ N 1) (* (+ N 1) (sizeof double))))))
  (= d (cast (ptr (array double (+ N 1))) (csym::malloc (* (+ N 1) (* (+ N 1) (sizeof double))))))
  ;; (csym::fprintf stderr "start initialization~%")
  (for ((= j 0) (< j (+ N 1)) (inc j))
    (for ((= i 0) (< i (+ N 1)) (inc i))
      (= (aref c j i) 0)
      (= (aref d j i) 0)))
  ;; col 0.5
  (for ((= j 1) (< j (+ N 1)) (inc j))
    (= (aref c j 0) 0.5)
    (= (aref d j 0) 0.5))
  ;; row 1
  (for ((= i 1) (< i (+ N 1)) (inc i))
    (= (aref c 0 i) 1)
    (= (aref d 0 i) 1))

  (for ((= k 0) (< k It) (inc k))
    (for ((= j 1) (< j N) (inc j))
      (for ((= i 1) (< i N) (inc i))
        (= (aref d j i) 
            (+ (aref c j i) 
              (* (* delT (* N N)) 
                (-
                  (+
                    (+ (aref c (+ j 1) i) (aref c (- j 1) i))
                    (+ (aref c j (+ i 1)) (aref c j (- i 1)))
                  )
                  (* 4 (aref c j i))
                )
              )
            )
        )
      )
    )
    (def t (ptr (array double (+ N 1))))
    (= t (ptr (aref c 0)))
    (= c (ptr (aref d 0)))
    (= d t)
  )
)