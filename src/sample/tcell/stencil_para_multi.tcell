;; final version program of hybrid CPU and GPU
;; multi cpus and hybird cpu and gpu

(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL)
(%include "rule/tcell-setrule.sh")

(c-exp "#include<stdio.h>")
(c-exp "#include<stdlib.h>")
(c-exp "#include<time.h>")
(c-exp "#include<math.h>")
(c-exp "#include<string.h>")
(c-exp "#include<sys/time.h>")
(c-exp "#include \"stencil_acc_multi.h\"")
(%include "clib.sh")

;; (static c (ptr (array double (+ N 2))))
;; (static d (ptr (array double (+ N 2))))
(def it int)
(decl myMutex pthread_mutex_t PTHREAD_MUTEX_INITIALIZER)

(decl (csym::get-wall-time) (fn double void))
(decl (csym::elapsed-time tp) (fn double (array (struct timeval) 2)))
(decl (block_para param n i1 i2 it) (wfn void (ptr (array int 2)) int int int int))
(decl (stencil_recursive x y n it)(wfn void int int int int))
(decl (csym::stencil_seq_tb x y it)(fn void int int int))
(decl (csym::stencil_seq)(fn void))
(decl (csym::printpointer s)(fn void (ptr (array double (+ N 2)))))
(decl (stencil x y n) (wfn void int int int))

(def (csym::elapsed-time tp) (fn double (array (struct timeval) 2))
  (return (+ (- (fref (aref tp 1) tv-sec)
                (fref (aref tp 0) tv-sec))
             (* 0.000001
                (- (fref (aref tp 1) tv-usec)
                   (fref (aref tp 0) tv-usec))))))
                  
(def (task stencil-start)
  ;; (def a long :in)
  ;; (def N long :in)
  (def th_gpu1 int :in)
  (def th_gpu2 int :in)
  (def th_cpu int :in)
  (def It int :in)
  (def BLOCK_LEVEL int :in))

(def (task blockTask)
    (def param (ptr (array int 2)))
    (def n int)
    (def i1 int)
    (def i2 int)
    (def it int))

(def (task-body blockTask)
;; (csym::fprintf stderr "task-body: worker_id=%d ~%" WORKER-ID)
    (block_para this.param this.n this.i1 this.i2 this.it)
    )

(def (task-body stencil-start)
  (decl tp (array (struct timeval) 2))
  (decl tp1 (array (struct timeval) 2))
  (decl tp_gpu0 (array (struct timeval) 2))

  (= th_gpu1 this.th_gpu1)
  (= th_gpu2 this.th_gpu2)
  (= th_cpu this.th_cpu)
  (= It this.It)
  (= BLOCK_LEVEL this.BLOCK_LEVEL)
  ;; (csym::fprintf stderr "a=%ld b=%ld~%" this.a this.b)

  (csym::fprintf stderr "N=%d, It=%d, th_gpu1=%d, th_gpu2=%d, th_cpu=%d, BLOCK_LEVEL=%d ~%" N It th_gpu1 th_gpu2 th_cpu BLOCK_LEVEL)
  ;; (csym::fprintf stderr "start stencil~%")
  (= a (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
  (= b (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
  (= c (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
  (= d (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
  (= material (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))

  (def i int)
  (def j int)
  (def k int)
  (def x int 1)
  (def y int 1)

  ;; (csym::fprintf stderr "start initialization~%")
  (csym::memset a 0 (* (+ N 2) (+ N 2) (sizeof double)))
  (csym::memset b 0 (* (+ N 2) (+ N 2) (sizeof double)))

  ;;   ;; col 0.5
  ;; (for ((= j 1) (< j (+ N 2)) (inc j))
  ;;   (= (aref a j 0) 0.5)
  ;;   (= (aref b j 0) 0.5))
  ;; ;; row 1
  ;; (for ((= i 1) (< i (+ N 2)) (inc i))
  ;;   (= (aref a 0 i) 1)
  ;;   (= (aref b 0 i) 1))

  (csym::srand 17)
  (for ((= i 0) (< i (+ N 2)) (inc i))
    (for ((= j 0) (< j (+ N 2)) (inc j))
      (= (aref a i j) (+ 0.0 (% (csym::rand) 100))) ;Initialize temperatures randomly between 20 and 30
      (= (aref c i j) (aref a i j))
      ;; (= (aref material i j) (% (+ i j) 3))
   ))
  (for ((= i 0) (< i (+ N 2)) (inc i))
    (= (aref b i 0) (aref a i 0))
    (= (aref b 0 i) (aref a 0 i))
    (= (aref b i (+ N 1)) (aref a i (+ N 1)))
    (= (aref b (+ N 1) i) (aref a (+ N 1) i))
    (= (aref d i 0) (aref a i 0))
    (= (aref d 0 i) (aref a 0 i))
    (= (aref d i (+ N 1)) (aref a i (+ N 1)))
    (= (aref d (+ N 1) i) (aref a (+ N 1) i)))

  ;; (def tmp_b (ptr (array double (+ N 2))))
  ;; (= tmp_b a)
  ;; (= a b)
  ;; (= b tmp_b)

  ;; (csym::fprintf stderr "------------------- initialize gpu  -----------------~%")
  ;; (csym::gettimeofday tp_gpu0 0)
  (csym::init_gpu N)
  ;; (csym::gettimeofday (+ tp_gpu0 1) 0)
  ;; (csym::fprintf stderr "time_gpu0: %5.4f~%" (csym::elapsed-time tp_gpu0))

  ;; (csym::printpointer a)
  ;; (csym::printpointer b)
  ;; (csym::printpointer c)
  ;; (csym::printpointer d)
  ;; (csym::printpointer material)

  (csym::fprintf stderr "stencil_para start iteration~%")
  (csym::fprintf stderr "------------------- time -----------------~%")
  (csym::gettimeofday tp 0)
  (stencil x y N)
  (csym::gettimeofday (+ tp 1) 0)
  (csym::pthread_mutex_destroy (ptr myMutex))
  (csym::fprintf stderr "time_gpu: %5.4f~%" (csym::elapsed-time tp))
  
  ;; (csym::fprintf stderr "stencil_seq start iteration~%")
  ;; (csym::gettimeofday tp1 0)
  ;; (csym::stencil_seq)
  ;; ;; (csym::stencil_seq_tb 1 1 0)
  ;; (csym::gettimeofday (+ tp1 1) 0)
  ;; (csym::fprintf stderr "time_cpu: %5.4f~%" (csym::elapsed-time tp1))
  ;; (csym::fprintf stderr "-----------------------------------------~%~%")
  ;; (def flag int 0)
  ;;   (for ((= i 0) (< i (+ N 1)) (inc i))
  ;;       (for ((= j 0) (< j (+ N 1)) (inc j))      
  ;;           (if (> (csym::fabs(- (aref a i j) (aref c i j))) 1.0E-4)
  ;;               (begin
  ;;                   (csym::fprintf stderr "THE ANSWER IS WRONG!~%")
  ;;                   (= flag 1)
  ;;                   (break))))
  ;;       (if (== flag 1) (break)))
  ;;   (if (== flag 0)
  ;;       (csym::fprintf stderr "THE ANSWER IS RIGHT!~%"))
  
  ;; (csym::fprintf stderr "------------------- GPU -----------------~%~%")
  ;; (csym::printpointer a)
  ;; (csym::fprintf stderr "------------------- CPU -----------------~%~%")
  ;; (csym::printpointer c)
    
  ;; (def fp (ptr FILE))
  ;; (= fp (fopen "u2.data" "w"))
  ;; (for ((= j 0) (< j N) (inc j))
  ;;   (for ((= i 0) (< i N) (inc i))-
  ;;     (csym::fprintf fp " %.15E %.15E %.15E~%" (/ (cast double i) N) (/ (cast double j) N) (aref a j i))
  ;;   )
  ;;   (csym::fprintf fp "~%")
  ;; )
  ;; (fclose fp)
)

(def (stencil x y n) (wfn void int int int)
  (defs int i j k)
  (def t (ptr (array double (+ N 2))))
  ;; (def tp3 (array (struct timeval) 2))

  ;; (for ((= k 0) (< k It) (inc k))
  ;;   (stencil_recursive x y n it)
  ;;   (= t a)
  ;;   (= a b)
  ;;   (= b t)
  ;; )

  ;; (csym::fprintf stderr "with temporal blcoking~%~%")
  (for ((= it 0) (< it It) (+= it BLOCK_LEVEL))
    (stencil_recursive x y n it)
    (= t a)
    (= a b)
    (= b t)
  )
)

(def (stencil_recursive x y n it)(wfn void int int int int)
  (defs int i j k)
  (defs double start end start1 end1)

  ;; (if (and (<= n th_gpu1) (< WORKER-ID 1))
  ;;  (if (and (<= n th_gpu1) (>= n th_gpu2) (== (csym::pthread_mutex_trylock (ptr myMutex)) 0))
  (if (and (<= n th_gpu1) (> n th_gpu2) (== (csym::pthread_mutex_trylock (ptr myMutex)) 0))
    (begin
      ;; (= start (csym::get-wall-time))
      (csym::sgpu_tb x y n WORKER-ID it)
      ;; (= end (csym::get-wall-time))
      ;; (csym::fprintf stderr "GPU: worker_id=%d, it=%d, n=%d, x=%d, y=%d, start=%5.4f, end=%5.4f, time=%5.4f~%" WORKER-ID it n x y start end (* 10 (- end start)))
      (csym::pthread_mutex_unlock (ptr myMutex))
      ) ;relase lock
      ;; (csym::perror "pthread_mutex_trylock ~%") 
      ;; (csym::gpu x y n WORKER-ID it) 
    ;; )
    (begin 
      ;; (if (< n 0)
      (if (<= n th_cpu)
        (begin 

          ;; (= start1 (csym::get-wall-time))
          (csym::scpu_tb x y n WORKER-ID it)
          ;; (= end1 (csym::get-wall-time))
          ;; (csym::fprintf stderr "CPU: worker_id=%d, it=%d, n=%d, x=%d, y=%d, start=%5.4f, end=%5.4f, time=%5.4f~%" WORKER-ID it n x y start end (* 10 (- end1 start1)))

          ;; (csym::fprintf stderr "CPU: wroker_id=%d, it=%d, n=%d, x=%d, y=%d ~%" WORKER-ID it n x y)
          ;; (csym::tb x y n WORKER-ID it 0)
          ;; (csym::scpu_tb x y n WORKER-ID it)
          ;; (csym::cpu x y n WORKER-ID it)
          ;; (csym::fprintf stderr "CPU_WORKER-ID = %d  ~%" WORKER-ID) 
        )
        (begin 
          ;; (csym::fprintf stderr "cpu1: wroker_id=%d, it=%d, n=%d, x=%d, y=%d ~%" WORKER-ID it n x y)
          (defs int x0 x1 x2 x3 y0 y1 y2 y3)
          (= x0 x)
          (= y0 y)
          (= x1 x)
          (= y1 (+ y (/ n 2)))
          (= x2 (+ x (/ n 2)))
          (= y2 y)
          (= x3 (+ x (/ n 2)))
          (= y3 (+ y (/ n 2)))
          ;; (csym::fprintf stderr "x0=%d, y0=%d, x1=%d, y1=%d, x2=%d, y2=%d,x3=%d, y3=%d, ~%" x0 y0 x1 y1 x2 y2 x3 y3)
          (def param (array int 4 2))
          (= (aref param 0 0) x0)
          (= (aref param 0 1) y0)
          (= (aref param 1 0) x1)
          (= (aref param 1 1) y1)
          (= (aref param 2 0) x2)
          (= (aref param 2 1) y2)
          (= (aref param 3 0) x3)
          (= (aref param 3 1) y3)
          (block_para param (/ n 2) 0 4 it)
        )
      )
    )
  )
)
    
(def (block_para param n i1 i2 it) (wfn void (ptr (array int 2)) int int int int)
  (def i int)
  ;; (csym::fprintf stderr "i1 = %d i2 = %d ~%" i1 i2) 
  (do-many for i from i1 to i2
    (stencil_recursive (aref param i 0) (aref param i 1) n it)
    (handles blockTask
      (:put from j1 to j2
        (= this.param param)
        (= this.n n)
        (= this.i1 j1)
        (= this.i2 j2)
        (= this.it it))
    (:get))))

(def (csym::printpointer s)(fn void (ptr (array double (+ N 2))))
    (defs int i j)
    (csym::fprintf stderr "====================================~%")
    (for ((= j 0) (< j (+ N 2)) (inc j))
      (for ((= i 0) (< i (+ N 2)) (inc i))
        ;; (= (aref s j i) 0)))
        (csym::fprintf stderr "%f " (aref s j i)))
      (csym::fprintf stderr "~%"))
      (csym::fprintf stderr "====================================~%"))

;; (def (csym::stencil_seq)(fn void)
;;   (defs int k j i jj ii blockEnd_c)

;;   (= c (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
;;   (= d (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
;;   ;; (csym::fprintf stderr "start initialization~%")
;;   (for ((= j 0) (< j (+ N 2)) (inc j))
;;     (for ((= i 0) (< i (+ N 2)) (inc i))
;;       (= (aref c j i) 0)
;;       (= (aref d j i) 0)))
;;   ;; col 0.5
;;   (for ((= j 1) (< j (+ N 2)) (inc j))
;;     (= (aref c j 0) 0.5)
;;     (= (aref d j 0) 0.5))
;;   ;; row 1
;;   (for ((= i 1) (< i (+ N 2)) (inc i))
;;     (= (aref c 0 i) 1)
;;     (= (aref d 0 i) 1))

;;   (for ((= k 0) (< k It) (inc k))
;;     (for ((= j 1) (< j (+ N 1)) (inc j))
;;       (for ((= i 1) (< i (+ N 1)) (inc i))    
;;         (= (aref d j i) 
;;           (* delT 
;;             (+
;;               (aref c j i)
;;               ;; (+  
;;                 (+
;;                   (+ (aref c (+ j 1) i) (aref c (- j 1) i))
;;                   (+ (aref c j (+ i 1)) (aref c j (- i 1)))
;;                 )
;;                 ;; (+
;;                 ;;   (+ (aref c (- j 1) (- i 1)) (aref c (+ j 1) (- i 1)))
;;                 ;;   (+ (aref c (- j 1) (+ i 1)) (aref c (+ j 1) (+ i 1)))
;;                 ;; ) 
;;               ;; )                  
;;             )
;;           )     
;;         )   
;;       )
;;     )
;;     (def tt (ptr (array double (+ N 2)))) 
;;     (= tt c)
;;     (= c d)
;;     (= d tt)
;;   )
;; )

(def (csym::stencil_seq)(fn void)
  (defs int k j i)

  ;; (= c (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
  ;; (= d (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
  ;; (csym::fprintf stderr "start initialization~%")
  ;; (for ((= j 0) (< j (+ N 2)) (inc j))
  ;;   (for ((= i 0) (< i (+ N 2)) (inc i))
  ;;     (= (aref c j i) 0)
  ;;     (= (aref d j i) 0)))
  ;; ;; col 0.5
  ;; (for ((= j 1) (< j (+ N 2)) (inc j))
  ;;   (= (aref c j 0) 0.5)
  ;;   (= (aref d j 0) 0.5))
  ;; ;; row 1
  ;; (for ((= i 1) (< i (+ N 2)) (inc i))
  ;;   (= (aref c 0 i) 1)
  ;;   (= (aref d 0 i) 1))

  ;; (for ((= i 1) (< i (+ N 2)) (inc i))
  ;;   (for ((= j 1) (< j (+ N 2)) (inc j))
  ;;     (= (aref c i j) (+ 20 (% (csym::rand) 10))) ;Initialize temperatures randomly between 20 and 30
  ;;   ))
  ;; (def tmp_d (ptr (array double (+ N 2))))
  ;; (= tmp_d c)
  ;; (= c d)
  ;; (= d tmp_d)

  (for ((= k 0) (< k It) (inc k))
    (for ((= j 1) (< j (+ N 1)) (inc j))
      (for ((= i 1) (< i (+ N 1)) (inc i))  
        (csym::seq_cpu j i k) 
        ;; (if (> (aref c j i) MAX_TEMP)    
        ;;   (begin 
            ;; (= (aref d j i) 
            ;;   ;; (-
            ;;   ;;   (aref c j i)
            ;;   ;;   (* 0.1
            ;;   ;;     (- 
            ;;   ;;       (aref c j i)
            ;;         (* delT1 
            ;;           (+
            ;;             (aref c j i) (aref c (+ j 1) i) (aref c (- j 1) i) (aref c j (+ i 1)) (aref c j (- i 1))
        ;;                 (+ (aref c (- j 1) (- i 1)) (aref c (+ j 1) (- i 1)))
        ;;                 (+ (aref c (- j 1) (+ i 1)) (aref c (+ j 1) (+ i 1)))                     
        ;;               )
        ;;             )
        ;;       ;;     )
        ;;       ;;   )
        ;;       ;; )
        ;;     )
        ;;   )
        ;;   (begin 
        ;;     (= (aref d j i) 
        ;;       (* delT 
        ;;         (+
        ;;           (aref c j i)
        ;;           ;; (+  
        ;;           (+
        ;;             (+ (aref c (+ j 1) i) (aref c (- j 1) i))
        ;;             (+ (aref c j (+ i 1)) (aref c j (- i 1)))
        ;;           )
        ;;           ;;   (+
        ;;           ;;     (+ (aref c (- j 1) (- i 1)) (aref c (+ j 1) (- i 1)))
        ;;           ;;     (+ (aref c (- j 1) (+ i 1)) (aref c (+ j 1) (+ i 1)))
        ;;           ;;   ) 
        ;;           ;; )                  
        ;;         )
        ;;       )     
        ;;     )            
        ;;   )
        ;; )   
      )
    )
    (def tt (ptr (array double (+ N 2)))) 
    (= tt c)
    (= c d)
    (= d tt)
  )
)

(def (csym::stencil_seq_tb x y it)(fn void int int int)
  (defs int k j i)
  ;; (= c (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
  ;; (= d (cast (ptr (array double (+ N 2))) (csym::malloc (* (+ N 2) (+ N 2) (sizeof double)))))
  ;; (csym::fprintf stderr "start initialization~%")
  ;; (for ((= j 0) (< j (+ N 2)) (inc j))
  ;;   (for ((= i 0) (< i (+ N 2)) (inc i))
  ;;     (= (aref c j i) 0)
  ;;     (= (aref d j i) 0)))
  ;; ;; col 0.5
  ;; (for ((= j 1) (< j (+ N 2)) (inc j))
  ;;   (= (aref c j 0) 0.5)
  ;;   (= (aref d j 0) 0.5))
  ;; ;; row 1
  ;; (for ((= i 1) (< i (+ N 2)) (inc i))
  ;;   (= (aref c 0 i) 1)
  ;;   (= (aref d 0 i) 1))
  ;; (def tmp_d (ptr (array double (+ N 2))))
  ;; (= tmp_d c)
  ;; (= c d)
  ;; (= d tmp_d)

  (for ((= it 0) (< it It) (+= it BLOCK_LEVEL))
    (for ((= j 1) (< j (+ N 1)) (+= j th_cpu))
      (for ((= i 1) (< i (+ N 1)) (+= i th_cpu))
        (= x j) 
        (= y i)
        ;; (csym::fprintf stderr "x=%d, y=%d ~%" x y)
        (csym::cpu_tb x y th_cpu it)   
      ))
    (def tt (ptr (array double (+ N 2)))) 
    (= tt c)
    (= c d)
    (= d tt)
  )
)

(def (csym::get-wall-time) (fn double void)
  (decl time (struct timeval))
  (if (csym::gettimeofday (ptr time) NULL) (begin (return 0)))
  (return (+ (cast double (fref time tv-sec)) (* (cast double (fref time tv-usec)) 0.000001))))
