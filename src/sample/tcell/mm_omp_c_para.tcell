;; // task:split matrix C, with openmp, parallized

(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL)
(%include "rule/tcell-setrule.sh")

(c-exp "#include <stdio.h>")
(c-exp "#include <stdlib.h>")
(c-exp "#include <math.h>")
(c-exp "#include <time.h>")
(c-exp "#include <sys/time.h>")
(c-exp "#include \"mm_c_th_acc.h\"")
(c-exp "#include <pthread.h>")


(defs (array double N N) d)
;; (defs (array double th th) C)
(defs double start end)
(def elapsed double)
(def mm_sub_total double 0)
;; (= mm_sub_total 0)
(def count int 0)
;; (= count 0)
;; (decl result int)

(decl myMutex pthread_mutex_t PTHREAD_MUTEX_INITIALIZER)
;; (= myMutex PTHREAD_MUTEX_INITIALIZER) ;创建互斥锁

(decl (csym::get-wall-time) (fn double void))
(decl (csym::createarr temp) (fn void (array double N N)))
(decl (csym::matMul n) (fn void int))
(decl (block_recursive c_r c_c len) (wfn void int int int))
(decl (csym::print c) (fn void (array double N N)))
(decl (csym::printarray a) (fn void (array double N N)))
(decl (csym::transpose b) (fn void (array double N N)))
(decl (block_para param n i1 i2) (wfn void (ptr (array int 2)) int int int))

;; (def worker-init)

(def (task mm-start))
(def (task blockTask)
    (def n int)
    (def param (ptr (array int 2)))
    (def i1 int)
    (def i2 int))

(def (task-body blockTask)
    (block_para this.param this.n this.i1 this.i2))

(def (task-body mm-start)
    (defs int i j c_r c_c len)
    (defs double start1 end1)
    (defs double start2 end2)
    (def elapsed1 double)
    (def elapsed2 double)
    ;; (defs double start end)
    (= len N)
    (= c_r 0)
    (= c_c 0)

;;  ;; pthread data
;;     (decl resetThread (array pthread_t (fref option num-thrs)))
;;     (decl data (array threadInfo (fref option num-thrs)))
;;     (decl attr pthread_attr_t)

;;  ;; init pthread
;;     (csym::pthread_attr_init (ptr attr))
;;     (csym::pthread_attr_setdetachstate (ptr attr) PTHREAD_CREATE_JOINABLE)

    ;; (csym::initC 4)
    (csym::fprintf stderr "mm_omp_c_para's result is as follows:   ~%")
    (csym::fprintf stderr "-------------------------------------------------------------------------~%")
    (csym::fprintf stderr "Matrix size = %2d~%" N) 
    (csym::fprintf stderr "th_gpu1 = %2d, th_gpu2 = %2d, " th_gpu1 th_gpu2) 
    (csym::fprintf stderr "th_cpu = %2d~%" th_cpu)

    (csym::srand 0) 
    (csym::createarr a)
    (csym::createarr b)
    (csym::transpose b)

    ;; (= start1 (csym::get-wall-time))
    ;; (csym::matMul len)
    ;; (= end1 (csym::get-wall-time))
    ;; (= elapsed1 (- end1 start1))
    ;; (csym::fprintf stderr "naive_time = %5.4f    " elapsed1)

    (defs double start end)
    (def elapsed double)
    (= start2 (csym::get-wall-time))
    ;; (csym::fprintf stderr "start_time = %5.4f  ~%" start2) 
    (block_recursive c_r c_c len)
    (= end2 (csym::get-wall-time))
    ;; (csym::pthread_mutex_destroy (ptr myMutex))
    (= elapsed2 (- end2 start2))
    ;; (csym::fprintf stderr "count = %d  ~%" count) 
    ;; (csym::fprintf stderr "mm_sub_total_time = %5.4f  ~%" mm_sub_total) 
    (csym::fprintf stderr "Block_time = %5.4f  ~%" elapsed2) 
    (csym::fprintf stderr "-------------------------------------------------------------------------~%")

    ;; (def flag int 0)
    ;; (for ((= i 0) (< i len) (inc i))
    ;;     (for ((= j 0) (< j len) (inc j))      
    ;;         (if (> (csym::fabs(- (aref c i j) (aref d i j))) 1.0E-6)
    ;;             (begin
    ;;                 (csym::fprintf stderr "THE ANSWER IS WRONG!~%")
    ;;                 (= flag 1)
    ;;                 (break))))
    ;;     (if (== flag 1) (break)))
    ;; (if (== flag 0)
    ;;     (csym::fprintf stderr "THE ANSWER IS RIGHT!~%"))
    
    ;; (csym::fprintf stderr "-------------------------------------------------------------------------~%")
    ;; (csym::fprintf stderr "------------------- Input Matrices a and b , T_b---------------------------~%~%")
    ;; (csym::printarray a)
    ;; (csym::printarray b)
    ;; (csym::printarray T_b)
    ;; (csym::fprintf stderr "------------------- Output Matrices c and d ---------------------------~%~%")
    ;; (csym::print c)
    ;; (csym::print d)
    )

(def (block_recursive c_r c_c len)(wfn void int int int)
    (def n int len)

    ;;     ;; (and (<= n th) (or (== 0 WORKER-ID) (== 1 WORKER-ID)))
    ;;     (<= n th_gpu1)   
    ;;     (begin
            ;; (csym::mm_sub c_r c_c len WORKER-ID)
            ;; ;; ;; (csym::fprintf stderr "GPU_WORKER-ID = %d  ~%" WORKER-ID) 
            ;;  int result = pthread_mutex_trylock(&mutex);
            ;; (def result int (csym::pthread_mutex_trylock (ptr myMutex)))
            ;; (def result int)
            ;; (= result (csym::pthread_mutex_trylock (ptr myMutex)))
            ;; (csym::pthread_mutex_lock (ptr myMutex)) ;get lock
    ;; (if (and (<= n th_gpu1) (>= n th_gpu2) (== (csym::pthread_mutex_trylock (ptr myMutex)) 0))
    (if (and (<= n th_gpu1) (>= n th_gpu2) (<= WORKER-ID 3))
        (begin
            ;; (= start (csym::get-wall-time))
            ;; (csym::fprintf stderr "start_time = %5.4f  ~%" start2) 
            (csym::mm_sub c_r c_c len WORKER-ID)
            ;; (csym::pthread_mutex_unlock (ptr myMutex))) ;relase lock
            ;; (csym::perror "pthread_mutex_trylock ~%") 
        )
        (begin 
            (if (<= n th_cpu)
                (begin 
                    (csym::mm_sub_cpu c_r c_c len)
                    ;; (csym::fprintf stderr "CPU_WORKER-ID = %d  ~%" WORKER-ID) 
                    )
                (begin 
                    (defs int sc1_r sc1_c sc2_r sc2_c sc3_r sc3_c sc4_r sc4_c)

                    (= sc1_r c_r)
                    (= sc1_c c_c)
                    (= sc2_r c_r)
                    (= sc2_c (+ c_c (/ n 2)))
                    (= sc3_c c_c)
                    (= sc3_r (+ c_r (/ n 2)))
                    (= sc4_r (+ c_r (/ n 2)))
                    (= sc4_c (+ c_c (/ n 2)))

                    (def param (ptr (array int 2)))
                    (= param (cast (ptr (array int 2)) (csym::malloc (* (sizeof (array int 2)) 4))))

                    (= (aref param 0 0) sc1_r)
                    (= (aref param 0 1) sc1_c)
                    (= (aref param 1 0) sc2_r)
                    (= (aref param 1 1) sc2_c)
                    (= (aref param 2 0) sc3_r)
                    (= (aref param 2 1) sc3_c)
                    (= (aref param 3 0) sc4_r)
                    (= (aref param 3 1) sc4_c)

                    (block_para param (/ n 2) 0 4))   
        ))
    ))

(def (block_para param n i1 i2) (wfn void (ptr (array int 2)) int int int)
    (def i int)
    ;; (csym::fprintf stderr "i1 = %d i2 = %d ~%" i1 i2) 
    (do-many for i from i1 to i2
        (block_recursive (aref param i 0) (aref param i 1) n)
        (handles blockTask
            (:put from j1 to j2
                (= this.param param)
                (= this.n n)
                (= this.i1 j1)
                (= this.i2 j2))
            (:get))))

(def (csym::createarr temp)(fn void (array double N N))
    (defs int i  j)
    (= i 0)
    (= j 0)
    (for ((= i 0) (< i N) (inc i))
        (for ((= j 0) (< j N) (inc j))
            ;; (= (aref temp i j) (/ (csym::rand) (+ RAND_MAX 1.0)))
            (= (aref temp i j) (% (csym::rand) 5))
            ;; (= (aref temp i j) (if-exp (>= i j) 1 2.901))
            )))
 
(def (csym::print c) (fn void (array double N N))
    (defs int i j)
    (csym::fprintf stderr "~%====================================~%")
    (for ((= i 0) (< i N) (inc i))
        (for ((= j 0) (< j N) (inc j))
            (csym::fprintf stderr "%5.4f " (aref c i j)))
        (csym::fprintf stderr "~%"))
    (csym::fprintf stderr "====================================~%"))

(def (csym::printarray a) (fn void (array double N N))
    (defs int i j)
    (csym::fprintf stderr "====================================~%")
    (for ((= i 0) (< i N) (inc i))
        (for ((= j 0) (< j N) (inc j))
            (csym::fprintf stderr "%5.4f  " (aref a i j)))
        (csym::fprintf stderr "~%"))
    (csym::fprintf stderr "====================================~%"))

(def (csym::transpose b)(fn void (array double N N))
    (defs int i  j)
    (for ((= i 0) (< i N) (inc i))
        (for ((= j 0) (< j N) (inc j))
            (= (aref T_b j i) (aref b i j)))))

(def (csym::get-wall-time) (fn double void)
  (decl time (struct timeval))
  (if (csym::gettimeofday (ptr time) NULL) (begin (return 0)))
  (return (+ (cast double (fref time tv-sec)) (* (cast double (fref time tv-usec)) 0.000001))))

(def (csym::matMul n)(fn void int)
    (def k int 0)
    (def i int 0)
    (def j int 0)
    (def sum double)

    (for ((= i 0) (< i n) (inc i))
        (for ((= j 0) (< j n) (inc j))
            (= sum 0.0)
            (for ((= k 0) (< k n) (inc k))
                (+= sum (* (aref a i k) (aref T_b j k))))
            (= (aref d i j) sum))))            