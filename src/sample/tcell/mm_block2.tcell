;; tasks:
;; 1.without structure
;; 2.add threshold
;; 3.evaluate performance
;; 4.tascell
;; 5.parallelize this program
;;Block matrix mul without parallel stracture using Tascell

(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL)
(%include "rule/tcell-setrule.sh")

(c-exp "#include <stdio.h>")
(c-exp "#include <stdlib.h>")
(c-exp "#include <math.h>")
(c-exp "#include <time.h>")
(c-exp "#include <sys/time.h>")

(%defconstant N 1024)
(%defconstant th 10)

(defs (array double N N) a b c d)

(decl (csym::get-wall-time) (fn double void))
(decl (csym::createarr temp) (fn void (array double N N)))
(decl (csym::matMul n) (fn void int))
(decl (csym::block_recursive a_r a_c b_r b_c c_r c_c len) (fn void int int int int int int int))
(decl (csym::print c) (fn void (array double N N)))
(decl (csym::printarray a) (fn void (array double N N)))

(def (task mm-start))

(def (task-body mm-start)
    (defs int i j a_r a_c b_r b_c c_r c_c len)
    (defs double start1 end1)
    (defs double start2 end2)
    (def elapsed1 double)
    (def elapsed2 double)

    (= len N)
    (= a_r 0)
    (= a_c 0)
    (= b_r 0)
    (= b_c 0)
    (= c_r 0)
    (= c_c 0)

    (csym::fprintf stderr "mm_block2's result is as follows:   ~%")
    (csym::fprintf stderr "-------------------------------------------------------------------------~%")
    (csym::fprintf stderr "Matrix size = %2d~%" N) 
    (csym::fprintf stderr "threshold = %2d~%" th) 

    (csym::srand 0) 
    (csym::createarr a)
    (csym::createarr b)

    (= start1 (csym::get-wall-time))
    (csym::matMul len)
    (= end1 (csym::get-wall-time))
    (= elapsed1 (- end1 start1))
    (csym::fprintf stderr "naive_time = %5.4f    " elapsed1)

    (= start2 (csym::get-wall-time))
    (csym::block_recursive a_r a_c b_r b_c c_r c_c len)
    (= end2 (csym::get-wall-time))
    (= elapsed2 (- end2 start2))
    (csym::fprintf stderr "Block_time = %5.4f  ~%" elapsed2) 
    (csym::fprintf stderr "-------------------------------------------------------------------------~%")

    (def flag int 0)
    (for ((= i 0) (< i len) (inc i))
        (for ((= j 0) (< j len) (inc j))      
            (if (> (csym::fabs(- (aref c i j) (aref d i j))) 1.0E-6)
                (begin
                    (csym::fprintf stderr "THE ANSWER IS WRONG!~%")
                    (= flag 1)
                    (break))))
        (if (== flag 1) (break)))
    (if (== flag 0)
        (csym::fprintf stderr "THE ANSWER IS RIGHT!~%"))
    
    (csym::fprintf stderr "-------------------------------------------------------------------------~%")
    ;; (csym::fprintf stderr "------------------- Input Matrices a and b ---------------------------~%~%")
    ;; (csym::printarray a)
    ;; (csym::printarray b)
    ;; (csym::fprintf stderr "------------------- Output Matrices c and d ---------------------------~%~%")
    ;; (csym::print c)
    ;; (csym::print d)
    )

(def (csym::block_recursive a_r a_c b_r b_c c_r c_c len)(fn void int int int int int int int)
    (def n int len)

    (if (<= n th)
        (begin
            (defs int i_a i_c j_b j_c k_a k_b)
            (def sum double)
            (for ((exps (= i_a a_r) (= i_c c_r)) (< i_a (+ a_r n)) (exps (inc i_a) (inc i_c)))
                (for ((exps (= j_b b_c) (= j_c c_c)) (< j_b (+ b_c n)) (exps (inc j_b) (inc j_c)))
                    (= sum 0.0)
                    (for ((exps (= k_a a_c) (= k_b b_r)) (< k_a (+ a_c n)) (exps (inc k_a) (inc k_b)))
                        (+= sum (* (aref a i_a k_a) (aref b k_b j_b))))
                    (+= (aref c i_c j_c) sum))))
        (begin
            (defs int sa1_r sa1_c sb1_r sb1_c sc1_r sc1_c)
            (defs int sa2_r sa2_c sb2_r sb2_c sc2_r sc2_c)
            (defs int sa3_r sa3_c sb3_r sb3_c sc3_r sc3_c)
            (defs int sa4_r sa4_c sb4_r sb4_c sc4_r sc4_c)

            (= sa1_r a_r)
            (= sa1_c a_c)
            (= sa2_r a_r)
            (= sa2_c (+ a_c (/ n 2)))
            (= sa3_c a_c)
            (= sa3_r (+ a_r (/ n 2)))
            (= sa4_r (+ a_r (/ n 2)))
            (= sa4_c (+ a_c (/ n 2)))

            (= sb1_r b_r)
            (= sb1_c b_c)
            (= sb2_r b_r)
            (= sb2_c (+ b_c (/ n 2)))
            (= sb3_c b_c)
            (= sb3_r (+ b_r (/ n 2)))
            (= sb4_r (+ b_r (/ n 2)))
            (= sb4_c (+ b_c (/ n 2)))

            (= sc1_r c_r)
            (= sc1_c c_c)
            (= sc2_r c_r)
            (= sc2_c (+ c_c (/ n 2)))
            (= sc3_c c_c)
            (= sc3_r (+ c_r (/ n 2)))
            (= sc4_r (+ c_r (/ n 2)))
            (= sc4_c (+ c_c (/ n 2)))

            ;parallize 
            (csym::block_recursive sa1_r sa1_c sb1_r sb1_c sc1_r sc1_c (/ n 2))
            (csym::block_recursive sa2_r sa2_c sb3_r sb3_c sc1_r sc1_c (/ n 2))
            (csym::block_recursive sa1_r sa1_c sb2_r sb2_c sc2_r sc2_c (/ n 2))
            (csym::block_recursive sa2_r sa2_c sb4_r sb4_c sc2_r sc2_c (/ n 2))
            (csym::block_recursive sa3_r sa3_c sb1_r sb1_c sc3_r sc3_c (/ n 2))
            (csym::block_recursive sa4_r sa4_c sb3_r sb3_c sc3_r sc3_c (/ n 2))
            (csym::block_recursive sa3_r sa3_c sb2_r sb2_c sc4_r sc4_c (/ n 2))
            (csym::block_recursive sa4_r sa4_c sb4_r sb4_c sc4_r sc4_c (/ n 2))
        )))

(def (csym::createarr temp)(fn void (array double N N))
    (defs int i  j)
    (= i 0)
    (= j 0)
    (for ((= i 0) (< i N) (inc i))
        (for ((= j 0) (< j N) (inc j))
            (= (aref temp i j) (/ (csym::rand) (+ RAND_MAX 1.0))))))

(def (csym::print c) (fn void (array double N N))
    (defs int i j)
    (csym::fprintf stderr "~%====================================~%")
    (for ((= i 0) (< i N) (inc i))
        (for ((= j 0) (< j N) (inc j))
            (csym::fprintf stderr "%5.4f " (aref c i j)))
        (csym::fprintf stderr "~%"))
    (csym::fprintf stderr "====================================~%"))

(def (csym::printarray a) (fn void (array double N N))
    (defs int i j)
    (csym::fprintf stderr "====================================~%")
    (for ((= i 0) (< i N) (inc i))
        (for ((= j 0) (< j N) (inc j))
            (csym::fprintf stderr "%5.4f  " (aref a i j)))
        (csym::fprintf stderr "~%"))
    (csym::fprintf stderr "====================================~%"))

(def (csym::get-wall-time) (fn double void)
  (decl time (struct timeval))
  (if (csym::gettimeofday (ptr time) NULL) (begin (return 0)))
  (return (+ (cast double (fref time tv-sec)) (* (cast double (fref time tv-usec)) 0.000001))))

(def (csym::matMul n)(fn void int)
    (def k int 0)
    (def i int 0)
    (def j int 0)
    (def sum double)

    (for ((= i 0) (< i n) (inc i))
        (for ((= j 0) (< j n) (inc j))
            (= sum 0.0)
            (for ((= k 0) (< k n) (inc k))
                (+= sum (* (aref a i k) (aref b k j))))
            (= (aref d i j) sum))))            



