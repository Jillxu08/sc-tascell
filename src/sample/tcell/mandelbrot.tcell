(%ifndef* NF-TYPE
  (%defconstant NF-TYPE GCC)) ; one of (GCC LW-SC CL-SC XCC XCCCL)
(%include "rule/tcell-setrule.sh")

(c-exp "#include <stdio.h>")
(c-exp "#include <stdlib.h>")
(c-exp "#include <math.h>")
(c-exp "#include <time.h>")
(c-exp "#include <sys/time.h>")
(c-exp "#include <pthread.h>")
(c-exp "#include \"mandelbrot_acc.h\"")

(defs (array int (* HEIGHT WIDTH)) rslt_seq rslt_par)

(decl myMutex pthread_mutex_t PTHREAD_MUTEX_INITIALIZER)

(decl (csym::get-wall-time) (fn double void))
;; (decl (csym::is-in-mandelbrot real imag z_real_sq z_imag_sq) (fn int double double (ptr double) (ptr double)))
(decl (csym::seq-mandelbrot) (fn void))
(decl (par-mandelbrot i1 i2) (wfn void int int))
(decl (csym::valid-check) (fn int))
(decl (csym::print-rslt) (fn void))

(def (task mm-start)
    (def TH int :in)
    (def MAX_ITERATIONS int :in)
    (def th_gpu1 int :in)
    (def th_gpu2 int :in)
    (def th_cpu int :in))

(def (task subTask)
    (def i1 int)
    (def i2 int))

(def (task-body subTask)
    ;; (csym::fprintf stderr "i1 = %d i2 = %d ~%" this.i1 this.i2 )
    (par-mandelbrot this.i1 this.i2))

(def (task-body mm-start)
    (def x int)
    (def y int)
    (defs double start1 end1)
    (defs double start2 end2)
    (def elapsed1 double)
    (def elapsed2 double)

    (= TH this.TH)
    (= MAX_ITERATIONS this.MAX_ITERATIONS)
    (= th_gpu1 this.th_gpu1)
    (= th_gpu2 this.th_gpu2)
    (= th_cpu this.th_cpu)
 
    ;; (def fp (ptr FILE))
    ;; (= fp (csym::fopen "mandelbrot.ppm" "wb"))
    ;; (csym::fprintf fp "P6~%%d %d~%255~%" WIDTH HEIGHT)

    (csym::fprintf stderr "WIDTH=%d, HEIGHT=%d, TH=%d, MAX_ITERATIONS = %d ~%th_gpu1 = %d, th_gpu2 = %d, th_cpu = %d  ~%" WIDTH HEIGHT TH MAX_ITERATIONS th_gpu1 th_gpu2 th_cpu)

    ;; (for ((= y 0) (< y HEIGHT) (inc y))
    ;;     (for ((= x 0) (< x WIDTH) (inc x))
    ;;         (= (aref z_real_seq y x) 0)
    ;;         (= (aref z_imag_seq y x) 0)
    ;;         (= (aref z_real_par y x) 0)
    ;;         (= (aref z_imag_par y x) 0)
    ;;         ))

    ;; (csym::gpu_initialize)
    
    (= start1 (csym::get-wall-time))
    ;; (par-mandelbrot 0 HEIGHT)
     (par-mandelbrot 0 (* WIDTH HEIGHT))
    ;; (csym::gpu_trans)
    (= end1 (csym::get-wall-time))
    (= elapsed1 (- end1 start1))
    (csym::fprintf stderr "time = %5.4f  ~%" elapsed1)

    ;; (csym::seq-mandelbrot)
    ;; (if (csym::valid-check rslt_par rslt_seq)
    ;;     (csym::fprintf stderr "RIGHT~%")
    ;;     (csym::fprintf stderr "WRONG~%"))

    ;; (csym::print-rslt)

    (def fp (ptr FILE))
    (= fp (csym::fopen "mandelbrot.ppm" "wb"))
    (csym::fprintf fp "P6~%%d %d~%255~%" WIDTH HEIGHT)

    (for ((= y 0) (< y HEIGHT) (inc y))
        (for ((= x 0) (< x WIDTH) (inc x))
            (defs unsigned-char r g b)
            (def value int (aref rslt_par (+ (* y WIDTH) x)))
            (if (== value MAX_ITERATIONS)
                (begin
                    (= r 0)
                    (= g 0)
                    (= b 0))
                (begin
                    (def c double (/ (* 4 (csym::log value)) (csym::log MAX_ITERATIONS)))
                    (if (< c 1.0)
                        (begin
                            (= r 0)
                            (= g 0)
                            (= b (* 255.0 c)))
                        (begin 
                            (if (< c 2.0)
                                (begin 
                                    (= r 0)
                                    (= g (* 255.0 c))
                                    (= b 0))
                                (begin 
                                    (= r (* 255.0 c))
                                    (= g 0)
                                    (= b 0)))))))
            (csym::fputc r fp)
            (csym::fputc g fp)
            (csym::fputc b fp)))
    (csym::fclose fp))

(def (csym::seq-mandelbrot) (fn void)
    ;; (def fp (ptr FILE))
    ;; (= fp (csym::fopen "mandelbrot.ppm" "wb"))
    ;; (csym::fprintf fp "P6~%%d %d~%255~%" WIDTH HEIGHT)

    (def x int)
    (def y int)
    (for ((= y 0) (< y HEIGHT) (inc y))
        (for ((= x 0) (< x WIDTH) (inc x))
            (def real double)
            (= real (- (/ (* (- x (/ WIDTH 2.0)) 4.0) WIDTH) 0.5))
            (def imag double)
            (= imag (/ (* (- y (/ HEIGHT 2.0)) 4.0) HEIGHT))
            (def value int)
            ;; (def z_real_sq double)
            ;; (def z_imag_sq double)
            (= value (csym::in_mandelbrot real imag))
            ;; (= value (csym::in_mandelbrot real imag))
            ;; (= value (csym::in_mandelbrot reali mag (aref z_real_seq y x) (aref z_imag_seq y x)))
            (= (aref rslt_seq (+ (* y WIDTH) x)) value)

            ;; (defs unsigned-char r g b)

            ;; (if (== value MAX_ITERATIONS)
            ;;     (begin
            ;;         (= r 0)
            ;;         (= g 0)
            ;;         (= b 0))
            ;;     (begin
            ;;         (def c double (/ (* 4 (csym::log value)) (csym::log MAX_ITERATIONS)))
            ;;         (if (< c 1.0)
            ;;             (begin
            ;;                 (= r 0)
            ;;                 (= g 0)
            ;;                 (= b (* 255.0 c)))
            ;;             (begin 
            ;;                 (if (< c 2.0)
            ;;                     (begin 
            ;;                         (= r 0)
            ;;                         (= g (* 255.0 c))
            ;;                         (= b 0))
            ;;                     (begin 
            ;;                         (= r (* 255.0 c))
            ;;                         (= g 0)
            ;;                         (= b 0)))))))
            ;; (csym::fputc r fp)
            ;; (csym::fputc g fp)
            ;; (csym::fputc b fp)
        )) 
    ;; (csym::fclose fp)
    )

(def (par-mandelbrot i1 i2) (wfn void int int)
    ;; (def x int)
    ;; (def y int)
    ;; (csym::fprintf stderr "x1 = %d x2 = %d ~%" x1 x2)
    (defs double start2 start3 end2 end3 elapsed2 elapsed3)

    (def n int (- i2 i1))
    ;; (csym::fprintf stderr "i1 = %d, i2 = %d ~%" i1 i2)
    (if (> n 0)
        ;; (if (and (<= n th_gpu1) (>= n th_gpu2) (== WORKER-ID 0))  (>= i1 16000000)
        ;; (if (and (<= n th_gpu1) (>= n th_gpu2) (<= i2 250000000) (== (csym::pthread_mutex_trylock (ptr myMutex)) 0))
        (if (and (<= n th_gpu1) (>= n th_gpu2) (== (csym::pthread_mutex_trylock (ptr myMutex)) 0))
            (begin
                ;; (csym::fprintf stderr "GPU: WORKER-ID = %d, i1 = %d, i2 = %d ~%" WORKER-ID i1 i2) 
                (csym::mb_acc i1 i2)
                (csym::pthread_mutex_unlock (ptr myMutex)) ;relase lock
                ;; (csym::fprintf stderr "GPU: WORKER-ID = %d, i1 = %d, i2 = %d ~%" WORKER-ID i1 i2) 

                ;; (csym::fprintf stderr "GPU: WORKER-ID = %d, i1 = %d, i2 = %d ~%" WORKER-ID i1 i2)
                ;; (== (csym::pthread_mutex_trylock (ptr myMutex)) 0)
                ;; (= start2 (csym::get-wall-time))
                ;; (csym::mb_acc i1 i2)
                ;; (csym::pthread_mutex_unlock (ptr myMutex)) ;relase lock
                ;; (= end2 (csym::get-wall-time))
                ;; (= elapsed2 (- end2 start2))
                ;; (csym::fprintf stderr "time_gpu = %5.4f  ~%" elapsed2)
                ;; (csym::fprintf stderr "GPU: time_gpu = %5.4f, WORKER-ID = %d, n = %d, i1 = %d, i2 = %d ~%" elapsed2 WORKER-ID n i1 i2)
                ;; (csym::fprintf stderr "WORKER-ID = %d ~%" WORKER-ID)
            )
            (begin
                (if (<= n th_cpu)
                ;; (if (and (<= n th_cpu) (<= i2 250000000))
                    (begin 
                        ;; (csym::fprintf stderr "CPU: WORKER-ID = %d, i1 = %d, i2 = %d ~%" WORKER-ID i1 i2)
                        ;; (= start3 (csym::get-wall-time))
                        ;; (csym::mb_acc_cpu i1 i2)
                        ;; (= end3 (csym::get-wall-time))
                        ;; (= elapsed3 (- end3 start3))
                        ;; (csym::fprintf stderr "time_cpu = %5.4f  ~%" elapsed3)
                        ;; (csym::fprintf stderr "CPU: time_cpu = %5.4f, WORKER-ID = %d, n = %d, i1 = %d, i2 = %d ~%" elapsed3 WORKER-ID n i1 i2)
                        ;; (csym::fprintf stderr "n_cpu = %d ~%" n)

                        (csym::mb_acc_cpu i1 i2)
                    )
                    (begin
                        (def mid int)
                        (= mid (/ (+ i1 i2) 2))
                        ;; (csym::fprintf stderr "mid = %d, i1 = %d, i2 = %d ~%" mid i1 i2)
                        (do-two 
                            (par-mandelbrot i1 mid)
                            (par-mandelbrot mid i2)
                            (handles subTask
                                (:put
                                    (= this.i1 mid)
                                    (= this.i2 i2)
                                )
                                (:get)))))))))

(def (csym::valid-check) (fn int)
    (def x int)
    (def y int)
    (for ((= y 0) (< y HEIGHT) (inc y))
        (for ((= x 0) (< x WIDTH) (inc x))
            ;; (csym::fprintf stderr "rslt_par=%d, rslt_seq=%d~%" (aref rslt_par y x) (aref rslt_seq y x))
            (if (> (csym::fabs(- (aref rslt_par (+ (* y WIDTH) x)) (aref rslt_seq (+ (* y WIDTH) x)))) 1)
                ;; if (not (== (aref rslt_par y x) (aref rslt_seq y x)))

                (begin 
                    ;; (csym::fprintf stderr "y=%d, x=%d, rslt_par=%d, rslt_seq=%d~%" y x (aref rslt_par y x) (aref rslt_seq y x))
                    (return 0)))))
    (return 1))

(def (csym::get-wall-time) (fn double void)
  (decl time (struct timeval))
  (if (csym::gettimeofday (ptr time) NULL) (begin (return 0)))
  (return (+ (cast double (fref time tv-sec)) (* (cast double (fref time tv-usec)) 0.000001))))

(def (csym::print-rslt) (fn void)
    (def x int)
    (def y int)
    (def count int 0)
    (def count_in_madelbrot (array  int HEIGHT))
    (def totle_count int 0)

    (for ((= y 0) (< y HEIGHT) (inc y))
        (= (aref count_in_madelbrot y) 0)
        (for ((= x 0) (< x WIDTH) (inc x))
            ;; (if (> (csym::fabs(- (aref rslt_par y x) (aref rslt_seq y x))) 1)  
            ;;     ;; if (not (== (aref rslt_seq y x) (aref rslt_par y x)))
            ;;     (csym::fprintf stderr "x1 = %d x2 = %d seq = %d par = %d ~%" y x  (aref rslt_seq y x) (aref rslt_par y x))
            ;;     ;; (csym::fprintf stderr "x1 = %d x2 = %d seq = %d par = %d , z_real_seq= %f, z_real_par =%f, z_imag_seq=%f, z_imag_par=%f ~%" y x  (aref rslt_seq y x) (aref rslt_par y x) (aref z_real_seq y x) (aref z_real_par y x) (aref z_imag_seq y x) (aref z_imag_par y x))
            ;;     )
            (+= totle_count (aref rslt_par (+ (* y WIDTH) x)))
            (if (== (aref rslt_par (+ (* y WIDTH) x)) MAX_ITERATIONS)               
                (begin
                    (inc count))
                ;; (csym::fprintf stderr "x1 = %d x2 = %d par = %d ~%" y x (aref rslt_par y x))            
                (begin 
                    (+= (aref count_in_madelbrot y) (aref rslt_par (+ (* y WIDTH) x))))))
        (csym::fprintf stderr "count_in_madelbrot[%d] = %d ~%" y (aref count_in_madelbrot y)))
    (csym::fprintf stderr "count = %d ~%" count)
    (csym::fprintf stderr "totle_count = %d ~%" totle_count))