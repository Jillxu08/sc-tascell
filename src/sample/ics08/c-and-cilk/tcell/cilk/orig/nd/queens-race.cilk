/* Copyright (c) 2002 Massachusetts Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

static const char *ident __attribute__((__unused__))
     = "$HeadURL: https://bradley.csail.mit.edu/svn/repos/cilk/5.4.3/examples/nd/queens-race.cilk $ $LastChangedBy: bradley $ $Rev: 73 $ $Date: 2002-12-25 19:09:12 -0500 (Wed, 25 Dec 2002) $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <cilk.h>
#include <cilk-lib.h>
#include <cilk-compat.h>

#define MAX_QUEENS 128

int safe(char *config, int i, int j)
{
    int r, s;

    for (r=0; r<i; r++) {
        s = config[r];
        if (j==s || i-r==j-s || i-r==s-j) 
            return 0;
    }
    return 1;
}

cilk char *nqueens(char *config, int n, int i)
{
    char new_config[MAX_QUEENS];
    char *done = NULL;
    int  j;
  
    inlet void catch(char *res)
    {
        if (res != NULL) {
            if (done == NULL)
                done = res;
            abort;
        }
    }
    if (i==n) {
        char *result;

        /* put this good solution in heap, 
           and return a pointer to it */
        result = malloc(n*sizeof(char));
        memcpy(result, config, n*sizeof(char));

        return result;
    }

    /* copy the config from the caller */
    memcpy(new_config, config, i*sizeof(char));
  
    /* try each possible position for queen <i> */
    for (j=0; j<n; j++) {
        if (safe(new_config, i, j)) {
            new_config[i] = j;
            catch(spawn nqueens(new_config, n, i+1));
        }
      
        if (done != NULL)
            break;
    }
    sync;
  
    return done;
}


cilk int main(int argc, char *argv[])
{
    int  n;
    char config[MAX_QUEENS];
    char *result;
    int  i;
  
    if (argc < 2) {
        printf("%s: number of queens required\n", argv[0]);
        return 1;
    }
  
    n = atoi(argv[1]);
    printf("running queens %d\n", n);

    result = spawn nqueens(config, n, 0);
    sync;

    if (result != NULL) {
        printf("Solution: ");
        for (i=0; i<n; i++)
            printf("%2d ", result[i]);
        printf("\n");
    }
    else
        printf("No solutions!\n");
  
    return 0;
}
